// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: qtstat.proto

#include "qtstat.pb.h"
#include "qtstat.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace qtstat {

static const char* QtStat_method_names[] = {
  "/qtstat.QtStat/UpdateVoiceStatus",
  "/qtstat.QtStat/PushDisplayInfo",
  "/qtstat.QtStat/GetState",
  "/qtstat.QtStat/SetSetpoint",
  "/qtstat.QtStat/SetHeatSetpoint",
  "/qtstat.QtStat/SetCoolSetpoint",
  "/qtstat.QtStat/SetHvacMode",
  "/qtstat.QtStat/SetFanMode",
};

std::unique_ptr< QtStat::Stub> QtStat::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< QtStat::Stub> stub(new QtStat::Stub(channel));
  return stub;
}

QtStat::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_UpdateVoiceStatus_(QtStat_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PushDisplayInfo_(QtStat_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetState_(QtStat_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSetpoint_(QtStat_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetHeatSetpoint_(QtStat_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCoolSetpoint_(QtStat_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetHvacMode_(QtStat_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetFanMode_(QtStat_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status QtStat::Stub::UpdateVoiceStatus(::grpc::ClientContext* context, const ::qtstat::VoiceStatusRequest& request, ::qtstat::VoiceStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateVoiceStatus_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::qtstat::VoiceStatusResponse>* QtStat::Stub::AsyncUpdateVoiceStatusRaw(::grpc::ClientContext* context, const ::qtstat::VoiceStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::qtstat::VoiceStatusResponse>::Create(channel_.get(), cq, rpcmethod_UpdateVoiceStatus_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::qtstat::VoiceStatusResponse>* QtStat::Stub::PrepareAsyncUpdateVoiceStatusRaw(::grpc::ClientContext* context, const ::qtstat::VoiceStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::qtstat::VoiceStatusResponse>::Create(channel_.get(), cq, rpcmethod_UpdateVoiceStatus_, context, request, false);
}

::grpc::Status QtStat::Stub::PushDisplayInfo(::grpc::ClientContext* context, const ::qtstat::DisplayRequest& request, ::qtstat::DisplayResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PushDisplayInfo_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::qtstat::DisplayResponse>* QtStat::Stub::AsyncPushDisplayInfoRaw(::grpc::ClientContext* context, const ::qtstat::DisplayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::qtstat::DisplayResponse>::Create(channel_.get(), cq, rpcmethod_PushDisplayInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::qtstat::DisplayResponse>* QtStat::Stub::PrepareAsyncPushDisplayInfoRaw(::grpc::ClientContext* context, const ::qtstat::DisplayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::qtstat::DisplayResponse>::Create(channel_.get(), cq, rpcmethod_PushDisplayInfo_, context, request, false);
}

::grpc::Status QtStat::Stub::GetState(::grpc::ClientContext* context, const ::qtstat::HvacStateRequest& request, ::qtstat::HvacStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetState_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>* QtStat::Stub::AsyncGetStateRaw(::grpc::ClientContext* context, const ::qtstat::HvacStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::qtstat::HvacStateResponse>::Create(channel_.get(), cq, rpcmethod_GetState_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>* QtStat::Stub::PrepareAsyncGetStateRaw(::grpc::ClientContext* context, const ::qtstat::HvacStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::qtstat::HvacStateResponse>::Create(channel_.get(), cq, rpcmethod_GetState_, context, request, false);
}

::grpc::Status QtStat::Stub::SetSetpoint(::grpc::ClientContext* context, const ::qtstat::FloatValue& request, ::qtstat::HvacStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetSetpoint_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>* QtStat::Stub::AsyncSetSetpointRaw(::grpc::ClientContext* context, const ::qtstat::FloatValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::qtstat::HvacStateResponse>::Create(channel_.get(), cq, rpcmethod_SetSetpoint_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>* QtStat::Stub::PrepareAsyncSetSetpointRaw(::grpc::ClientContext* context, const ::qtstat::FloatValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::qtstat::HvacStateResponse>::Create(channel_.get(), cq, rpcmethod_SetSetpoint_, context, request, false);
}

::grpc::Status QtStat::Stub::SetHeatSetpoint(::grpc::ClientContext* context, const ::qtstat::FloatValue& request, ::qtstat::HvacStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetHeatSetpoint_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>* QtStat::Stub::AsyncSetHeatSetpointRaw(::grpc::ClientContext* context, const ::qtstat::FloatValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::qtstat::HvacStateResponse>::Create(channel_.get(), cq, rpcmethod_SetHeatSetpoint_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>* QtStat::Stub::PrepareAsyncSetHeatSetpointRaw(::grpc::ClientContext* context, const ::qtstat::FloatValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::qtstat::HvacStateResponse>::Create(channel_.get(), cq, rpcmethod_SetHeatSetpoint_, context, request, false);
}

::grpc::Status QtStat::Stub::SetCoolSetpoint(::grpc::ClientContext* context, const ::qtstat::FloatValue& request, ::qtstat::HvacStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetCoolSetpoint_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>* QtStat::Stub::AsyncSetCoolSetpointRaw(::grpc::ClientContext* context, const ::qtstat::FloatValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::qtstat::HvacStateResponse>::Create(channel_.get(), cq, rpcmethod_SetCoolSetpoint_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>* QtStat::Stub::PrepareAsyncSetCoolSetpointRaw(::grpc::ClientContext* context, const ::qtstat::FloatValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::qtstat::HvacStateResponse>::Create(channel_.get(), cq, rpcmethod_SetCoolSetpoint_, context, request, false);
}

::grpc::Status QtStat::Stub::SetHvacMode(::grpc::ClientContext* context, const ::qtstat::HvacMode& request, ::qtstat::HvacStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetHvacMode_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>* QtStat::Stub::AsyncSetHvacModeRaw(::grpc::ClientContext* context, const ::qtstat::HvacMode& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::qtstat::HvacStateResponse>::Create(channel_.get(), cq, rpcmethod_SetHvacMode_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>* QtStat::Stub::PrepareAsyncSetHvacModeRaw(::grpc::ClientContext* context, const ::qtstat::HvacMode& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::qtstat::HvacStateResponse>::Create(channel_.get(), cq, rpcmethod_SetHvacMode_, context, request, false);
}

::grpc::Status QtStat::Stub::SetFanMode(::grpc::ClientContext* context, const ::qtstat::FanMode& request, ::qtstat::HvacStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetFanMode_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>* QtStat::Stub::AsyncSetFanModeRaw(::grpc::ClientContext* context, const ::qtstat::FanMode& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::qtstat::HvacStateResponse>::Create(channel_.get(), cq, rpcmethod_SetFanMode_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>* QtStat::Stub::PrepareAsyncSetFanModeRaw(::grpc::ClientContext* context, const ::qtstat::FanMode& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::qtstat::HvacStateResponse>::Create(channel_.get(), cq, rpcmethod_SetFanMode_, context, request, false);
}

QtStat::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      QtStat_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< QtStat::Service, ::qtstat::VoiceStatusRequest, ::qtstat::VoiceStatusResponse>(
          std::mem_fn(&QtStat::Service::UpdateVoiceStatus), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      QtStat_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< QtStat::Service, ::qtstat::DisplayRequest, ::qtstat::DisplayResponse>(
          std::mem_fn(&QtStat::Service::PushDisplayInfo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      QtStat_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< QtStat::Service, ::qtstat::HvacStateRequest, ::qtstat::HvacStateResponse>(
          std::mem_fn(&QtStat::Service::GetState), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      QtStat_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< QtStat::Service, ::qtstat::FloatValue, ::qtstat::HvacStateResponse>(
          std::mem_fn(&QtStat::Service::SetSetpoint), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      QtStat_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< QtStat::Service, ::qtstat::FloatValue, ::qtstat::HvacStateResponse>(
          std::mem_fn(&QtStat::Service::SetHeatSetpoint), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      QtStat_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< QtStat::Service, ::qtstat::FloatValue, ::qtstat::HvacStateResponse>(
          std::mem_fn(&QtStat::Service::SetCoolSetpoint), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      QtStat_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< QtStat::Service, ::qtstat::HvacMode, ::qtstat::HvacStateResponse>(
          std::mem_fn(&QtStat::Service::SetHvacMode), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      QtStat_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< QtStat::Service, ::qtstat::FanMode, ::qtstat::HvacStateResponse>(
          std::mem_fn(&QtStat::Service::SetFanMode), this)));
}

QtStat::Service::~Service() {
}

::grpc::Status QtStat::Service::UpdateVoiceStatus(::grpc::ServerContext* context, const ::qtstat::VoiceStatusRequest* request, ::qtstat::VoiceStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status QtStat::Service::PushDisplayInfo(::grpc::ServerContext* context, const ::qtstat::DisplayRequest* request, ::qtstat::DisplayResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status QtStat::Service::GetState(::grpc::ServerContext* context, const ::qtstat::HvacStateRequest* request, ::qtstat::HvacStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status QtStat::Service::SetSetpoint(::grpc::ServerContext* context, const ::qtstat::FloatValue* request, ::qtstat::HvacStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status QtStat::Service::SetHeatSetpoint(::grpc::ServerContext* context, const ::qtstat::FloatValue* request, ::qtstat::HvacStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status QtStat::Service::SetCoolSetpoint(::grpc::ServerContext* context, const ::qtstat::FloatValue* request, ::qtstat::HvacStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status QtStat::Service::SetHvacMode(::grpc::ServerContext* context, const ::qtstat::HvacMode* request, ::qtstat::HvacStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status QtStat::Service::SetFanMode(::grpc::ServerContext* context, const ::qtstat::FanMode* request, ::qtstat::HvacStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace qtstat

