// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: siana-stat.proto

#include "siana-stat.pb.h"
#include "siana-stat.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* SianaStat_method_names[] = {
  "/SianaStat/VoiceAssistantSelect",
  "/SianaStat/UpdateVoiceState",
  "/SianaStat/PushDisplayInfo",
  "/SianaStat/GetState",
  "/SianaStat/SetSetpoint",
  "/SianaStat/SetHeatSetpoint",
  "/SianaStat/SetCoolpoint",
  "/SianaStat/SetHvacMode",
  "/SianaStat/SetFanMode",
};

std::unique_ptr< SianaStat::Stub> SianaStat::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SianaStat::Stub> stub(new SianaStat::Stub(channel));
  return stub;
}

SianaStat::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_VoiceAssistantSelect_(SianaStat_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateVoiceState_(SianaStat_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PushDisplayInfo_(SianaStat_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetState_(SianaStat_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSetpoint_(SianaStat_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetHeatSetpoint_(SianaStat_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCoolpoint_(SianaStat_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetHvacMode_(SianaStat_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetFanMode_(SianaStat_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SianaStat::Stub::VoiceAssistantSelect(::grpc::ClientContext* context, const ::VoiceAssistantRequest& request, ::VoiceAssistantResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_VoiceAssistantSelect_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::VoiceAssistantResponse>* SianaStat::Stub::AsyncVoiceAssistantSelectRaw(::grpc::ClientContext* context, const ::VoiceAssistantRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::VoiceAssistantResponse>::Create(channel_.get(), cq, rpcmethod_VoiceAssistantSelect_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VoiceAssistantResponse>* SianaStat::Stub::PrepareAsyncVoiceAssistantSelectRaw(::grpc::ClientContext* context, const ::VoiceAssistantRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::VoiceAssistantResponse>::Create(channel_.get(), cq, rpcmethod_VoiceAssistantSelect_, context, request, false);
}

::grpc::Status SianaStat::Stub::UpdateVoiceState(::grpc::ClientContext* context, const ::VoiceStateRequest& request, ::VoiceStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateVoiceState_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::VoiceStateResponse>* SianaStat::Stub::AsyncUpdateVoiceStateRaw(::grpc::ClientContext* context, const ::VoiceStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::VoiceStateResponse>::Create(channel_.get(), cq, rpcmethod_UpdateVoiceState_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VoiceStateResponse>* SianaStat::Stub::PrepareAsyncUpdateVoiceStateRaw(::grpc::ClientContext* context, const ::VoiceStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::VoiceStateResponse>::Create(channel_.get(), cq, rpcmethod_UpdateVoiceState_, context, request, false);
}

::grpc::Status SianaStat::Stub::PushDisplayInfo(::grpc::ClientContext* context, const ::DisplayRequest& request, ::DisplayResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PushDisplayInfo_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::DisplayResponse>* SianaStat::Stub::AsyncPushDisplayInfoRaw(::grpc::ClientContext* context, const ::DisplayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::DisplayResponse>::Create(channel_.get(), cq, rpcmethod_PushDisplayInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::DisplayResponse>* SianaStat::Stub::PrepareAsyncPushDisplayInfoRaw(::grpc::ClientContext* context, const ::DisplayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::DisplayResponse>::Create(channel_.get(), cq, rpcmethod_PushDisplayInfo_, context, request, false);
}

::grpc::Status SianaStat::Stub::GetState(::grpc::ClientContext* context, const ::HvacStateRequest& request, ::HvacStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetState_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::HvacStateResponse>* SianaStat::Stub::AsyncGetStateRaw(::grpc::ClientContext* context, const ::HvacStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::HvacStateResponse>::Create(channel_.get(), cq, rpcmethod_GetState_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::HvacStateResponse>* SianaStat::Stub::PrepareAsyncGetStateRaw(::grpc::ClientContext* context, const ::HvacStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::HvacStateResponse>::Create(channel_.get(), cq, rpcmethod_GetState_, context, request, false);
}

::grpc::Status SianaStat::Stub::SetSetpoint(::grpc::ClientContext* context, const ::FloatValue& request, ::HvacStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetSetpoint_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::HvacStateResponse>* SianaStat::Stub::AsyncSetSetpointRaw(::grpc::ClientContext* context, const ::FloatValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::HvacStateResponse>::Create(channel_.get(), cq, rpcmethod_SetSetpoint_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::HvacStateResponse>* SianaStat::Stub::PrepareAsyncSetSetpointRaw(::grpc::ClientContext* context, const ::FloatValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::HvacStateResponse>::Create(channel_.get(), cq, rpcmethod_SetSetpoint_, context, request, false);
}

::grpc::Status SianaStat::Stub::SetHeatSetpoint(::grpc::ClientContext* context, const ::FloatValue& request, ::HvacStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetHeatSetpoint_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::HvacStateResponse>* SianaStat::Stub::AsyncSetHeatSetpointRaw(::grpc::ClientContext* context, const ::FloatValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::HvacStateResponse>::Create(channel_.get(), cq, rpcmethod_SetHeatSetpoint_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::HvacStateResponse>* SianaStat::Stub::PrepareAsyncSetHeatSetpointRaw(::grpc::ClientContext* context, const ::FloatValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::HvacStateResponse>::Create(channel_.get(), cq, rpcmethod_SetHeatSetpoint_, context, request, false);
}

::grpc::Status SianaStat::Stub::SetCoolpoint(::grpc::ClientContext* context, const ::FloatValue& request, ::HvacStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetCoolpoint_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::HvacStateResponse>* SianaStat::Stub::AsyncSetCoolpointRaw(::grpc::ClientContext* context, const ::FloatValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::HvacStateResponse>::Create(channel_.get(), cq, rpcmethod_SetCoolpoint_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::HvacStateResponse>* SianaStat::Stub::PrepareAsyncSetCoolpointRaw(::grpc::ClientContext* context, const ::FloatValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::HvacStateResponse>::Create(channel_.get(), cq, rpcmethod_SetCoolpoint_, context, request, false);
}

::grpc::Status SianaStat::Stub::SetHvacMode(::grpc::ClientContext* context, const ::HvacMode& request, ::HvacStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetHvacMode_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::HvacStateResponse>* SianaStat::Stub::AsyncSetHvacModeRaw(::grpc::ClientContext* context, const ::HvacMode& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::HvacStateResponse>::Create(channel_.get(), cq, rpcmethod_SetHvacMode_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::HvacStateResponse>* SianaStat::Stub::PrepareAsyncSetHvacModeRaw(::grpc::ClientContext* context, const ::HvacMode& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::HvacStateResponse>::Create(channel_.get(), cq, rpcmethod_SetHvacMode_, context, request, false);
}

::grpc::Status SianaStat::Stub::SetFanMode(::grpc::ClientContext* context, const ::FanMode& request, ::HvacStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetFanMode_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::HvacStateResponse>* SianaStat::Stub::AsyncSetFanModeRaw(::grpc::ClientContext* context, const ::FanMode& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::HvacStateResponse>::Create(channel_.get(), cq, rpcmethod_SetFanMode_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::HvacStateResponse>* SianaStat::Stub::PrepareAsyncSetFanModeRaw(::grpc::ClientContext* context, const ::FanMode& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::HvacStateResponse>::Create(channel_.get(), cq, rpcmethod_SetFanMode_, context, request, false);
}

SianaStat::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SianaStat_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SianaStat::Service, ::VoiceAssistantRequest, ::VoiceAssistantResponse>(
          std::mem_fn(&SianaStat::Service::VoiceAssistantSelect), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SianaStat_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SianaStat::Service, ::VoiceStateRequest, ::VoiceStateResponse>(
          std::mem_fn(&SianaStat::Service::UpdateVoiceState), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SianaStat_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SianaStat::Service, ::DisplayRequest, ::DisplayResponse>(
          std::mem_fn(&SianaStat::Service::PushDisplayInfo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SianaStat_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SianaStat::Service, ::HvacStateRequest, ::HvacStateResponse>(
          std::mem_fn(&SianaStat::Service::GetState), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SianaStat_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SianaStat::Service, ::FloatValue, ::HvacStateResponse>(
          std::mem_fn(&SianaStat::Service::SetSetpoint), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SianaStat_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SianaStat::Service, ::FloatValue, ::HvacStateResponse>(
          std::mem_fn(&SianaStat::Service::SetHeatSetpoint), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SianaStat_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SianaStat::Service, ::FloatValue, ::HvacStateResponse>(
          std::mem_fn(&SianaStat::Service::SetCoolpoint), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SianaStat_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SianaStat::Service, ::HvacMode, ::HvacStateResponse>(
          std::mem_fn(&SianaStat::Service::SetHvacMode), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SianaStat_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SianaStat::Service, ::FanMode, ::HvacStateResponse>(
          std::mem_fn(&SianaStat::Service::SetFanMode), this)));
}

SianaStat::Service::~Service() {
}

::grpc::Status SianaStat::Service::VoiceAssistantSelect(::grpc::ServerContext* context, const ::VoiceAssistantRequest* request, ::VoiceAssistantResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SianaStat::Service::UpdateVoiceState(::grpc::ServerContext* context, const ::VoiceStateRequest* request, ::VoiceStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SianaStat::Service::PushDisplayInfo(::grpc::ServerContext* context, const ::DisplayRequest* request, ::DisplayResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SianaStat::Service::GetState(::grpc::ServerContext* context, const ::HvacStateRequest* request, ::HvacStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SianaStat::Service::SetSetpoint(::grpc::ServerContext* context, const ::FloatValue* request, ::HvacStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SianaStat::Service::SetHeatSetpoint(::grpc::ServerContext* context, const ::FloatValue* request, ::HvacStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SianaStat::Service::SetCoolpoint(::grpc::ServerContext* context, const ::FloatValue* request, ::HvacStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SianaStat::Service::SetHvacMode(::grpc::ServerContext* context, const ::HvacMode* request, ::HvacStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SianaStat::Service::SetFanMode(::grpc::ServerContext* context, const ::FanMode* request, ::HvacStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


