// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qtstat.proto

#ifndef PROTOBUF_qtstat_2eproto__INCLUDED
#define PROTOBUF_qtstat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_qtstat_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsHvacModeImpl();
void InitDefaultsHvacMode();
void InitDefaultsFanModeImpl();
void InitDefaultsFanMode();
void InitDefaultsHvacStateRequestImpl();
void InitDefaultsHvacStateRequest();
void InitDefaultsHvacStateResponseImpl();
void InitDefaultsHvacStateResponse();
void InitDefaultsDisplayRequestImpl();
void InitDefaultsDisplayRequest();
void InitDefaultsDisplayResponseImpl();
void InitDefaultsDisplayResponse();
void InitDefaultsVoiceStatusRequestImpl();
void InitDefaultsVoiceStatusRequest();
void InitDefaultsVoiceStatusResponseImpl();
void InitDefaultsVoiceStatusResponse();
void InitDefaultsFloatValueImpl();
void InitDefaultsFloatValue();
inline void InitDefaults() {
  InitDefaultsHvacMode();
  InitDefaultsFanMode();
  InitDefaultsHvacStateRequest();
  InitDefaultsHvacStateResponse();
  InitDefaultsDisplayRequest();
  InitDefaultsDisplayResponse();
  InitDefaultsVoiceStatusRequest();
  InitDefaultsVoiceStatusResponse();
  InitDefaultsFloatValue();
}
}  // namespace protobuf_qtstat_2eproto
namespace qtstat {
class DisplayRequest;
class DisplayRequestDefaultTypeInternal;
extern DisplayRequestDefaultTypeInternal _DisplayRequest_default_instance_;
class DisplayResponse;
class DisplayResponseDefaultTypeInternal;
extern DisplayResponseDefaultTypeInternal _DisplayResponse_default_instance_;
class FanMode;
class FanModeDefaultTypeInternal;
extern FanModeDefaultTypeInternal _FanMode_default_instance_;
class FloatValue;
class FloatValueDefaultTypeInternal;
extern FloatValueDefaultTypeInternal _FloatValue_default_instance_;
class HvacMode;
class HvacModeDefaultTypeInternal;
extern HvacModeDefaultTypeInternal _HvacMode_default_instance_;
class HvacStateRequest;
class HvacStateRequestDefaultTypeInternal;
extern HvacStateRequestDefaultTypeInternal _HvacStateRequest_default_instance_;
class HvacStateResponse;
class HvacStateResponseDefaultTypeInternal;
extern HvacStateResponseDefaultTypeInternal _HvacStateResponse_default_instance_;
class VoiceStatusRequest;
class VoiceStatusRequestDefaultTypeInternal;
extern VoiceStatusRequestDefaultTypeInternal _VoiceStatusRequest_default_instance_;
class VoiceStatusResponse;
class VoiceStatusResponseDefaultTypeInternal;
extern VoiceStatusResponseDefaultTypeInternal _VoiceStatusResponse_default_instance_;
}  // namespace qtstat
namespace qtstat {

enum HvacModes {
  HVAC_UNKNOWN = 0,
  HVAC_OFF = 1,
  HVAC_HEAT = 2,
  HVAC_COOL = 3,
  HVAC_AUTO = 4,
  HvacModes_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  HvacModes_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool HvacModes_IsValid(int value);
const HvacModes HvacModes_MIN = HVAC_UNKNOWN;
const HvacModes HvacModes_MAX = HVAC_AUTO;
const int HvacModes_ARRAYSIZE = HvacModes_MAX + 1;

const ::google::protobuf::EnumDescriptor* HvacModes_descriptor();
inline const ::std::string& HvacModes_Name(HvacModes value) {
  return ::google::protobuf::internal::NameOfEnum(
    HvacModes_descriptor(), value);
}
inline bool HvacModes_Parse(
    const ::std::string& name, HvacModes* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HvacModes>(
    HvacModes_descriptor(), name, value);
}
enum FanModes {
  FAN_UNKNOWN = 0,
  FAN_OFF = 1,
  FAN_ON = 2,
  FAN_CIRC = 3,
  FanModes_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FanModes_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FanModes_IsValid(int value);
const FanModes FanModes_MIN = FAN_UNKNOWN;
const FanModes FanModes_MAX = FAN_CIRC;
const int FanModes_ARRAYSIZE = FanModes_MAX + 1;

const ::google::protobuf::EnumDescriptor* FanModes_descriptor();
inline const ::std::string& FanModes_Name(FanModes value) {
  return ::google::protobuf::internal::NameOfEnum(
    FanModes_descriptor(), value);
}
inline bool FanModes_Parse(
    const ::std::string& name, FanModes* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FanModes>(
    FanModes_descriptor(), name, value);
}
enum VoiceStatus {
  VOICE_UNKNOWN = 0,
  VOICE_IDLE = 1,
  VOICE_LISTENING = 2,
  VOICE_PROCESSING = 3,
  VoiceStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VoiceStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VoiceStatus_IsValid(int value);
const VoiceStatus VoiceStatus_MIN = VOICE_UNKNOWN;
const VoiceStatus VoiceStatus_MAX = VOICE_PROCESSING;
const int VoiceStatus_ARRAYSIZE = VoiceStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* VoiceStatus_descriptor();
inline const ::std::string& VoiceStatus_Name(VoiceStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    VoiceStatus_descriptor(), value);
}
inline bool VoiceStatus_Parse(
    const ::std::string& name, VoiceStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VoiceStatus>(
    VoiceStatus_descriptor(), name, value);
}
// ===================================================================

class HvacMode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:qtstat.HvacMode) */ {
 public:
  HvacMode();
  virtual ~HvacMode();

  HvacMode(const HvacMode& from);

  inline HvacMode& operator=(const HvacMode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HvacMode(HvacMode&& from) noexcept
    : HvacMode() {
    *this = ::std::move(from);
  }

  inline HvacMode& operator=(HvacMode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HvacMode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HvacMode* internal_default_instance() {
    return reinterpret_cast<const HvacMode*>(
               &_HvacMode_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(HvacMode* other);
  friend void swap(HvacMode& a, HvacMode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HvacMode* New() const PROTOBUF_FINAL { return New(NULL); }

  HvacMode* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HvacMode& from);
  void MergeFrom(const HvacMode& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HvacMode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .qtstat.HvacModes mode = 1;
  void clear_mode();
  static const int kModeFieldNumber = 1;
  ::qtstat::HvacModes mode() const;
  void set_mode(::qtstat::HvacModes value);

  // @@protoc_insertion_point(class_scope:qtstat.HvacMode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int mode_;
  mutable int _cached_size_;
  friend struct ::protobuf_qtstat_2eproto::TableStruct;
  friend void ::protobuf_qtstat_2eproto::InitDefaultsHvacModeImpl();
};
// -------------------------------------------------------------------

class FanMode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:qtstat.FanMode) */ {
 public:
  FanMode();
  virtual ~FanMode();

  FanMode(const FanMode& from);

  inline FanMode& operator=(const FanMode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FanMode(FanMode&& from) noexcept
    : FanMode() {
    *this = ::std::move(from);
  }

  inline FanMode& operator=(FanMode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FanMode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FanMode* internal_default_instance() {
    return reinterpret_cast<const FanMode*>(
               &_FanMode_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(FanMode* other);
  friend void swap(FanMode& a, FanMode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FanMode* New() const PROTOBUF_FINAL { return New(NULL); }

  FanMode* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FanMode& from);
  void MergeFrom(const FanMode& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FanMode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .qtstat.FanModes mode = 1;
  void clear_mode();
  static const int kModeFieldNumber = 1;
  ::qtstat::FanModes mode() const;
  void set_mode(::qtstat::FanModes value);

  // @@protoc_insertion_point(class_scope:qtstat.FanMode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int mode_;
  mutable int _cached_size_;
  friend struct ::protobuf_qtstat_2eproto::TableStruct;
  friend void ::protobuf_qtstat_2eproto::InitDefaultsFanModeImpl();
};
// -------------------------------------------------------------------

class HvacStateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:qtstat.HvacStateRequest) */ {
 public:
  HvacStateRequest();
  virtual ~HvacStateRequest();

  HvacStateRequest(const HvacStateRequest& from);

  inline HvacStateRequest& operator=(const HvacStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HvacStateRequest(HvacStateRequest&& from) noexcept
    : HvacStateRequest() {
    *this = ::std::move(from);
  }

  inline HvacStateRequest& operator=(HvacStateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HvacStateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HvacStateRequest* internal_default_instance() {
    return reinterpret_cast<const HvacStateRequest*>(
               &_HvacStateRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(HvacStateRequest* other);
  friend void swap(HvacStateRequest& a, HvacStateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HvacStateRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  HvacStateRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HvacStateRequest& from);
  void MergeFrom(const HvacStateRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HvacStateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:qtstat.HvacStateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_qtstat_2eproto::TableStruct;
  friend void ::protobuf_qtstat_2eproto::InitDefaultsHvacStateRequestImpl();
};
// -------------------------------------------------------------------

class HvacStateResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:qtstat.HvacStateResponse) */ {
 public:
  HvacStateResponse();
  virtual ~HvacStateResponse();

  HvacStateResponse(const HvacStateResponse& from);

  inline HvacStateResponse& operator=(const HvacStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HvacStateResponse(HvacStateResponse&& from) noexcept
    : HvacStateResponse() {
    *this = ::std::move(from);
  }

  inline HvacStateResponse& operator=(HvacStateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HvacStateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HvacStateResponse* internal_default_instance() {
    return reinterpret_cast<const HvacStateResponse*>(
               &_HvacStateResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(HvacStateResponse* other);
  friend void swap(HvacStateResponse& a, HvacStateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HvacStateResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  HvacStateResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HvacStateResponse& from);
  void MergeFrom(const HvacStateResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HvacStateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float sp = 1;
  void clear_sp();
  static const int kSpFieldNumber = 1;
  float sp() const;
  void set_sp(float value);

  // float hsp = 2;
  void clear_hsp();
  static const int kHspFieldNumber = 2;
  float hsp() const;
  void set_hsp(float value);

  // float csp = 3;
  void clear_csp();
  static const int kCspFieldNumber = 3;
  float csp() const;
  void set_csp(float value);

  // .qtstat.HvacModes mode = 4;
  void clear_mode();
  static const int kModeFieldNumber = 4;
  ::qtstat::HvacModes mode() const;
  void set_mode(::qtstat::HvacModes value);

  // .qtstat.FanModes fan = 5;
  void clear_fan();
  static const int kFanFieldNumber = 5;
  ::qtstat::FanModes fan() const;
  void set_fan(::qtstat::FanModes value);

  // @@protoc_insertion_point(class_scope:qtstat.HvacStateResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float sp_;
  float hsp_;
  float csp_;
  int mode_;
  int fan_;
  mutable int _cached_size_;
  friend struct ::protobuf_qtstat_2eproto::TableStruct;
  friend void ::protobuf_qtstat_2eproto::InitDefaultsHvacStateResponseImpl();
};
// -------------------------------------------------------------------

class DisplayRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:qtstat.DisplayRequest) */ {
 public:
  DisplayRequest();
  virtual ~DisplayRequest();

  DisplayRequest(const DisplayRequest& from);

  inline DisplayRequest& operator=(const DisplayRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DisplayRequest(DisplayRequest&& from) noexcept
    : DisplayRequest() {
    *this = ::std::move(from);
  }

  inline DisplayRequest& operator=(DisplayRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DisplayRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisplayRequest* internal_default_instance() {
    return reinterpret_cast<const DisplayRequest*>(
               &_DisplayRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(DisplayRequest* other);
  friend void swap(DisplayRequest& a, DisplayRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DisplayRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DisplayRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DisplayRequest& from);
  void MergeFrom(const DisplayRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DisplayRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // string url = 2;
  void clear_url();
  static const int kUrlFieldNumber = 2;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:qtstat.DisplayRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  mutable int _cached_size_;
  friend struct ::protobuf_qtstat_2eproto::TableStruct;
  friend void ::protobuf_qtstat_2eproto::InitDefaultsDisplayRequestImpl();
};
// -------------------------------------------------------------------

class DisplayResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:qtstat.DisplayResponse) */ {
 public:
  DisplayResponse();
  virtual ~DisplayResponse();

  DisplayResponse(const DisplayResponse& from);

  inline DisplayResponse& operator=(const DisplayResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DisplayResponse(DisplayResponse&& from) noexcept
    : DisplayResponse() {
    *this = ::std::move(from);
  }

  inline DisplayResponse& operator=(DisplayResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DisplayResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisplayResponse* internal_default_instance() {
    return reinterpret_cast<const DisplayResponse*>(
               &_DisplayResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(DisplayResponse* other);
  friend void swap(DisplayResponse& a, DisplayResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DisplayResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DisplayResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DisplayResponse& from);
  void MergeFrom(const DisplayResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DisplayResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:qtstat.DisplayResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_qtstat_2eproto::TableStruct;
  friend void ::protobuf_qtstat_2eproto::InitDefaultsDisplayResponseImpl();
};
// -------------------------------------------------------------------

class VoiceStatusRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:qtstat.VoiceStatusRequest) */ {
 public:
  VoiceStatusRequest();
  virtual ~VoiceStatusRequest();

  VoiceStatusRequest(const VoiceStatusRequest& from);

  inline VoiceStatusRequest& operator=(const VoiceStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VoiceStatusRequest(VoiceStatusRequest&& from) noexcept
    : VoiceStatusRequest() {
    *this = ::std::move(from);
  }

  inline VoiceStatusRequest& operator=(VoiceStatusRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VoiceStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VoiceStatusRequest* internal_default_instance() {
    return reinterpret_cast<const VoiceStatusRequest*>(
               &_VoiceStatusRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(VoiceStatusRequest* other);
  friend void swap(VoiceStatusRequest& a, VoiceStatusRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VoiceStatusRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  VoiceStatusRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoiceStatusRequest& from);
  void MergeFrom(const VoiceStatusRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoiceStatusRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .qtstat.VoiceStatus state = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::qtstat::VoiceStatus state() const;
  void set_state(::qtstat::VoiceStatus value);

  // @@protoc_insertion_point(class_scope:qtstat.VoiceStatusRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int state_;
  mutable int _cached_size_;
  friend struct ::protobuf_qtstat_2eproto::TableStruct;
  friend void ::protobuf_qtstat_2eproto::InitDefaultsVoiceStatusRequestImpl();
};
// -------------------------------------------------------------------

class VoiceStatusResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:qtstat.VoiceStatusResponse) */ {
 public:
  VoiceStatusResponse();
  virtual ~VoiceStatusResponse();

  VoiceStatusResponse(const VoiceStatusResponse& from);

  inline VoiceStatusResponse& operator=(const VoiceStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VoiceStatusResponse(VoiceStatusResponse&& from) noexcept
    : VoiceStatusResponse() {
    *this = ::std::move(from);
  }

  inline VoiceStatusResponse& operator=(VoiceStatusResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VoiceStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VoiceStatusResponse* internal_default_instance() {
    return reinterpret_cast<const VoiceStatusResponse*>(
               &_VoiceStatusResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(VoiceStatusResponse* other);
  friend void swap(VoiceStatusResponse& a, VoiceStatusResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VoiceStatusResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  VoiceStatusResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoiceStatusResponse& from);
  void MergeFrom(const VoiceStatusResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoiceStatusResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:qtstat.VoiceStatusResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_qtstat_2eproto::TableStruct;
  friend void ::protobuf_qtstat_2eproto::InitDefaultsVoiceStatusResponseImpl();
};
// -------------------------------------------------------------------

class FloatValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:qtstat.FloatValue) */ {
 public:
  FloatValue();
  virtual ~FloatValue();

  FloatValue(const FloatValue& from);

  inline FloatValue& operator=(const FloatValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FloatValue(FloatValue&& from) noexcept
    : FloatValue() {
    *this = ::std::move(from);
  }

  inline FloatValue& operator=(FloatValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FloatValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FloatValue* internal_default_instance() {
    return reinterpret_cast<const FloatValue*>(
               &_FloatValue_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(FloatValue* other);
  friend void swap(FloatValue& a, FloatValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FloatValue* New() const PROTOBUF_FINAL { return New(NULL); }

  FloatValue* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FloatValue& from);
  void MergeFrom(const FloatValue& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FloatValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  float value() const;
  void set_value(float value);

  // @@protoc_insertion_point(class_scope:qtstat.FloatValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float value_;
  mutable int _cached_size_;
  friend struct ::protobuf_qtstat_2eproto::TableStruct;
  friend void ::protobuf_qtstat_2eproto::InitDefaultsFloatValueImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HvacMode

// .qtstat.HvacModes mode = 1;
inline void HvacMode::clear_mode() {
  mode_ = 0;
}
inline ::qtstat::HvacModes HvacMode::mode() const {
  // @@protoc_insertion_point(field_get:qtstat.HvacMode.mode)
  return static_cast< ::qtstat::HvacModes >(mode_);
}
inline void HvacMode::set_mode(::qtstat::HvacModes value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:qtstat.HvacMode.mode)
}

// -------------------------------------------------------------------

// FanMode

// .qtstat.FanModes mode = 1;
inline void FanMode::clear_mode() {
  mode_ = 0;
}
inline ::qtstat::FanModes FanMode::mode() const {
  // @@protoc_insertion_point(field_get:qtstat.FanMode.mode)
  return static_cast< ::qtstat::FanModes >(mode_);
}
inline void FanMode::set_mode(::qtstat::FanModes value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:qtstat.FanMode.mode)
}

// -------------------------------------------------------------------

// HvacStateRequest

// -------------------------------------------------------------------

// HvacStateResponse

// float sp = 1;
inline void HvacStateResponse::clear_sp() {
  sp_ = 0;
}
inline float HvacStateResponse::sp() const {
  // @@protoc_insertion_point(field_get:qtstat.HvacStateResponse.sp)
  return sp_;
}
inline void HvacStateResponse::set_sp(float value) {
  
  sp_ = value;
  // @@protoc_insertion_point(field_set:qtstat.HvacStateResponse.sp)
}

// float hsp = 2;
inline void HvacStateResponse::clear_hsp() {
  hsp_ = 0;
}
inline float HvacStateResponse::hsp() const {
  // @@protoc_insertion_point(field_get:qtstat.HvacStateResponse.hsp)
  return hsp_;
}
inline void HvacStateResponse::set_hsp(float value) {
  
  hsp_ = value;
  // @@protoc_insertion_point(field_set:qtstat.HvacStateResponse.hsp)
}

// float csp = 3;
inline void HvacStateResponse::clear_csp() {
  csp_ = 0;
}
inline float HvacStateResponse::csp() const {
  // @@protoc_insertion_point(field_get:qtstat.HvacStateResponse.csp)
  return csp_;
}
inline void HvacStateResponse::set_csp(float value) {
  
  csp_ = value;
  // @@protoc_insertion_point(field_set:qtstat.HvacStateResponse.csp)
}

// .qtstat.HvacModes mode = 4;
inline void HvacStateResponse::clear_mode() {
  mode_ = 0;
}
inline ::qtstat::HvacModes HvacStateResponse::mode() const {
  // @@protoc_insertion_point(field_get:qtstat.HvacStateResponse.mode)
  return static_cast< ::qtstat::HvacModes >(mode_);
}
inline void HvacStateResponse::set_mode(::qtstat::HvacModes value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:qtstat.HvacStateResponse.mode)
}

// .qtstat.FanModes fan = 5;
inline void HvacStateResponse::clear_fan() {
  fan_ = 0;
}
inline ::qtstat::FanModes HvacStateResponse::fan() const {
  // @@protoc_insertion_point(field_get:qtstat.HvacStateResponse.fan)
  return static_cast< ::qtstat::FanModes >(fan_);
}
inline void HvacStateResponse::set_fan(::qtstat::FanModes value) {
  
  fan_ = value;
  // @@protoc_insertion_point(field_set:qtstat.HvacStateResponse.fan)
}

// -------------------------------------------------------------------

// DisplayRequest

// string message = 1;
inline void DisplayRequest::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DisplayRequest::message() const {
  // @@protoc_insertion_point(field_get:qtstat.DisplayRequest.message)
  return message_.GetNoArena();
}
inline void DisplayRequest::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qtstat.DisplayRequest.message)
}
#if LANG_CXX11
inline void DisplayRequest::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qtstat.DisplayRequest.message)
}
#endif
inline void DisplayRequest::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qtstat.DisplayRequest.message)
}
inline void DisplayRequest::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qtstat.DisplayRequest.message)
}
inline ::std::string* DisplayRequest::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:qtstat.DisplayRequest.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DisplayRequest::release_message() {
  // @@protoc_insertion_point(field_release:qtstat.DisplayRequest.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DisplayRequest::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:qtstat.DisplayRequest.message)
}

// string url = 2;
inline void DisplayRequest::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DisplayRequest::url() const {
  // @@protoc_insertion_point(field_get:qtstat.DisplayRequest.url)
  return url_.GetNoArena();
}
inline void DisplayRequest::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qtstat.DisplayRequest.url)
}
#if LANG_CXX11
inline void DisplayRequest::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qtstat.DisplayRequest.url)
}
#endif
inline void DisplayRequest::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qtstat.DisplayRequest.url)
}
inline void DisplayRequest::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qtstat.DisplayRequest.url)
}
inline ::std::string* DisplayRequest::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:qtstat.DisplayRequest.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DisplayRequest::release_url() {
  // @@protoc_insertion_point(field_release:qtstat.DisplayRequest.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DisplayRequest::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:qtstat.DisplayRequest.url)
}

// -------------------------------------------------------------------

// DisplayResponse

// -------------------------------------------------------------------

// VoiceStatusRequest

// .qtstat.VoiceStatus state = 1;
inline void VoiceStatusRequest::clear_state() {
  state_ = 0;
}
inline ::qtstat::VoiceStatus VoiceStatusRequest::state() const {
  // @@protoc_insertion_point(field_get:qtstat.VoiceStatusRequest.state)
  return static_cast< ::qtstat::VoiceStatus >(state_);
}
inline void VoiceStatusRequest::set_state(::qtstat::VoiceStatus value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:qtstat.VoiceStatusRequest.state)
}

// -------------------------------------------------------------------

// VoiceStatusResponse

// -------------------------------------------------------------------

// FloatValue

// float value = 1;
inline void FloatValue::clear_value() {
  value_ = 0;
}
inline float FloatValue::value() const {
  // @@protoc_insertion_point(field_get:qtstat.FloatValue.value)
  return value_;
}
inline void FloatValue::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:qtstat.FloatValue.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace qtstat

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::qtstat::HvacModes> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::qtstat::HvacModes>() {
  return ::qtstat::HvacModes_descriptor();
}
template <> struct is_proto_enum< ::qtstat::FanModes> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::qtstat::FanModes>() {
  return ::qtstat::FanModes_descriptor();
}
template <> struct is_proto_enum< ::qtstat::VoiceStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::qtstat::VoiceStatus>() {
  return ::qtstat::VoiceStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_qtstat_2eproto__INCLUDED
