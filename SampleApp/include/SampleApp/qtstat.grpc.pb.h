// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: qtstat.proto
// Original file comments:
// -----------------------------------------------------------------------------
// file: QtStat.proto
// description:
//  gRPC service definition for the thermostat core functions.
// -----------------------------------------------------------------------------
#ifndef GRPC_qtstat_2eproto__INCLUDED
#define GRPC_qtstat_2eproto__INCLUDED

#include "qtstat.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
    class CompletionQueue;
    class Channel;
    class ServerCompletionQueue;
    class ServerContext;
}

namespace qtstat {

class QtStat final {
 public:
  static constexpr char const* service_full_name() {
    return "qtstat.QtStat";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status UpdateVoiceStatus(::grpc::ClientContext* context, const ::qtstat::VoiceStatusRequest& request, ::qtstat::VoiceStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::VoiceStatusResponse>> AsyncUpdateVoiceStatus(::grpc::ClientContext* context, const ::qtstat::VoiceStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::VoiceStatusResponse>>(AsyncUpdateVoiceStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::VoiceStatusResponse>> PrepareAsyncUpdateVoiceStatus(::grpc::ClientContext* context, const ::qtstat::VoiceStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::VoiceStatusResponse>>(PrepareAsyncUpdateVoiceStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status PushDisplayInfo(::grpc::ClientContext* context, const ::qtstat::DisplayRequest& request, ::qtstat::DisplayResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::DisplayResponse>> AsyncPushDisplayInfo(::grpc::ClientContext* context, const ::qtstat::DisplayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::DisplayResponse>>(AsyncPushDisplayInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::DisplayResponse>> PrepareAsyncPushDisplayInfo(::grpc::ClientContext* context, const ::qtstat::DisplayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::DisplayResponse>>(PrepareAsyncPushDisplayInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status GetState(::grpc::ClientContext* context, const ::qtstat::HvacStateRequest& request, ::qtstat::HvacStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::HvacStateResponse>> AsyncGetState(::grpc::ClientContext* context, const ::qtstat::HvacStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::HvacStateResponse>>(AsyncGetStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::HvacStateResponse>> PrepareAsyncGetState(::grpc::ClientContext* context, const ::qtstat::HvacStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::HvacStateResponse>>(PrepareAsyncGetStateRaw(context, request, cq));
    }
    virtual ::grpc::Status SetSetpoint(::grpc::ClientContext* context, const ::qtstat::FloatValue& request, ::qtstat::HvacStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::HvacStateResponse>> AsyncSetSetpoint(::grpc::ClientContext* context, const ::qtstat::FloatValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::HvacStateResponse>>(AsyncSetSetpointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::HvacStateResponse>> PrepareAsyncSetSetpoint(::grpc::ClientContext* context, const ::qtstat::FloatValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::HvacStateResponse>>(PrepareAsyncSetSetpointRaw(context, request, cq));
    }
    virtual ::grpc::Status SetHeatSetpoint(::grpc::ClientContext* context, const ::qtstat::FloatValue& request, ::qtstat::HvacStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::HvacStateResponse>> AsyncSetHeatSetpoint(::grpc::ClientContext* context, const ::qtstat::FloatValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::HvacStateResponse>>(AsyncSetHeatSetpointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::HvacStateResponse>> PrepareAsyncSetHeatSetpoint(::grpc::ClientContext* context, const ::qtstat::FloatValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::HvacStateResponse>>(PrepareAsyncSetHeatSetpointRaw(context, request, cq));
    }
    virtual ::grpc::Status SetCoolSetpoint(::grpc::ClientContext* context, const ::qtstat::FloatValue& request, ::qtstat::HvacStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::HvacStateResponse>> AsyncSetCoolSetpoint(::grpc::ClientContext* context, const ::qtstat::FloatValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::HvacStateResponse>>(AsyncSetCoolSetpointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::HvacStateResponse>> PrepareAsyncSetCoolSetpoint(::grpc::ClientContext* context, const ::qtstat::FloatValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::HvacStateResponse>>(PrepareAsyncSetCoolSetpointRaw(context, request, cq));
    }
    virtual ::grpc::Status SetHvacMode(::grpc::ClientContext* context, const ::qtstat::HvacMode& request, ::qtstat::HvacStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::HvacStateResponse>> AsyncSetHvacMode(::grpc::ClientContext* context, const ::qtstat::HvacMode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::HvacStateResponse>>(AsyncSetHvacModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::HvacStateResponse>> PrepareAsyncSetHvacMode(::grpc::ClientContext* context, const ::qtstat::HvacMode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::HvacStateResponse>>(PrepareAsyncSetHvacModeRaw(context, request, cq));
    }
    virtual ::grpc::Status SetFanMode(::grpc::ClientContext* context, const ::qtstat::FanMode& request, ::qtstat::HvacStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::HvacStateResponse>> AsyncSetFanMode(::grpc::ClientContext* context, const ::qtstat::FanMode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::HvacStateResponse>>(AsyncSetFanModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::HvacStateResponse>> PrepareAsyncSetFanMode(::grpc::ClientContext* context, const ::qtstat::FanMode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::HvacStateResponse>>(PrepareAsyncSetFanModeRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::VoiceStatusResponse>* AsyncUpdateVoiceStatusRaw(::grpc::ClientContext* context, const ::qtstat::VoiceStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::VoiceStatusResponse>* PrepareAsyncUpdateVoiceStatusRaw(::grpc::ClientContext* context, const ::qtstat::VoiceStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::DisplayResponse>* AsyncPushDisplayInfoRaw(::grpc::ClientContext* context, const ::qtstat::DisplayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::DisplayResponse>* PrepareAsyncPushDisplayInfoRaw(::grpc::ClientContext* context, const ::qtstat::DisplayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::HvacStateResponse>* AsyncGetStateRaw(::grpc::ClientContext* context, const ::qtstat::HvacStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::HvacStateResponse>* PrepareAsyncGetStateRaw(::grpc::ClientContext* context, const ::qtstat::HvacStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::HvacStateResponse>* AsyncSetSetpointRaw(::grpc::ClientContext* context, const ::qtstat::FloatValue& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::HvacStateResponse>* PrepareAsyncSetSetpointRaw(::grpc::ClientContext* context, const ::qtstat::FloatValue& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::HvacStateResponse>* AsyncSetHeatSetpointRaw(::grpc::ClientContext* context, const ::qtstat::FloatValue& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::HvacStateResponse>* PrepareAsyncSetHeatSetpointRaw(::grpc::ClientContext* context, const ::qtstat::FloatValue& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::HvacStateResponse>* AsyncSetCoolSetpointRaw(::grpc::ClientContext* context, const ::qtstat::FloatValue& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::HvacStateResponse>* PrepareAsyncSetCoolSetpointRaw(::grpc::ClientContext* context, const ::qtstat::FloatValue& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::HvacStateResponse>* AsyncSetHvacModeRaw(::grpc::ClientContext* context, const ::qtstat::HvacMode& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::HvacStateResponse>* PrepareAsyncSetHvacModeRaw(::grpc::ClientContext* context, const ::qtstat::HvacMode& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::HvacStateResponse>* AsyncSetFanModeRaw(::grpc::ClientContext* context, const ::qtstat::FanMode& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::qtstat::HvacStateResponse>* PrepareAsyncSetFanModeRaw(::grpc::ClientContext* context, const ::qtstat::FanMode& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status UpdateVoiceStatus(::grpc::ClientContext* context, const ::qtstat::VoiceStatusRequest& request, ::qtstat::VoiceStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qtstat::VoiceStatusResponse>> AsyncUpdateVoiceStatus(::grpc::ClientContext* context, const ::qtstat::VoiceStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qtstat::VoiceStatusResponse>>(AsyncUpdateVoiceStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qtstat::VoiceStatusResponse>> PrepareAsyncUpdateVoiceStatus(::grpc::ClientContext* context, const ::qtstat::VoiceStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qtstat::VoiceStatusResponse>>(PrepareAsyncUpdateVoiceStatusRaw(context, request, cq));
    }
    ::grpc::Status PushDisplayInfo(::grpc::ClientContext* context, const ::qtstat::DisplayRequest& request, ::qtstat::DisplayResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qtstat::DisplayResponse>> AsyncPushDisplayInfo(::grpc::ClientContext* context, const ::qtstat::DisplayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qtstat::DisplayResponse>>(AsyncPushDisplayInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qtstat::DisplayResponse>> PrepareAsyncPushDisplayInfo(::grpc::ClientContext* context, const ::qtstat::DisplayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qtstat::DisplayResponse>>(PrepareAsyncPushDisplayInfoRaw(context, request, cq));
    }
    ::grpc::Status GetState(::grpc::ClientContext* context, const ::qtstat::HvacStateRequest& request, ::qtstat::HvacStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>> AsyncGetState(::grpc::ClientContext* context, const ::qtstat::HvacStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>>(AsyncGetStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>> PrepareAsyncGetState(::grpc::ClientContext* context, const ::qtstat::HvacStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>>(PrepareAsyncGetStateRaw(context, request, cq));
    }
    ::grpc::Status SetSetpoint(::grpc::ClientContext* context, const ::qtstat::FloatValue& request, ::qtstat::HvacStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>> AsyncSetSetpoint(::grpc::ClientContext* context, const ::qtstat::FloatValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>>(AsyncSetSetpointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>> PrepareAsyncSetSetpoint(::grpc::ClientContext* context, const ::qtstat::FloatValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>>(PrepareAsyncSetSetpointRaw(context, request, cq));
    }
    ::grpc::Status SetHeatSetpoint(::grpc::ClientContext* context, const ::qtstat::FloatValue& request, ::qtstat::HvacStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>> AsyncSetHeatSetpoint(::grpc::ClientContext* context, const ::qtstat::FloatValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>>(AsyncSetHeatSetpointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>> PrepareAsyncSetHeatSetpoint(::grpc::ClientContext* context, const ::qtstat::FloatValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>>(PrepareAsyncSetHeatSetpointRaw(context, request, cq));
    }
    ::grpc::Status SetCoolSetpoint(::grpc::ClientContext* context, const ::qtstat::FloatValue& request, ::qtstat::HvacStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>> AsyncSetCoolSetpoint(::grpc::ClientContext* context, const ::qtstat::FloatValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>>(AsyncSetCoolSetpointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>> PrepareAsyncSetCoolSetpoint(::grpc::ClientContext* context, const ::qtstat::FloatValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>>(PrepareAsyncSetCoolSetpointRaw(context, request, cq));
    }
    ::grpc::Status SetHvacMode(::grpc::ClientContext* context, const ::qtstat::HvacMode& request, ::qtstat::HvacStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>> AsyncSetHvacMode(::grpc::ClientContext* context, const ::qtstat::HvacMode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>>(AsyncSetHvacModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>> PrepareAsyncSetHvacMode(::grpc::ClientContext* context, const ::qtstat::HvacMode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>>(PrepareAsyncSetHvacModeRaw(context, request, cq));
    }
    ::grpc::Status SetFanMode(::grpc::ClientContext* context, const ::qtstat::FanMode& request, ::qtstat::HvacStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>> AsyncSetFanMode(::grpc::ClientContext* context, const ::qtstat::FanMode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>>(AsyncSetFanModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>> PrepareAsyncSetFanMode(::grpc::ClientContext* context, const ::qtstat::FanMode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>>(PrepareAsyncSetFanModeRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::qtstat::VoiceStatusResponse>* AsyncUpdateVoiceStatusRaw(::grpc::ClientContext* context, const ::qtstat::VoiceStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::qtstat::VoiceStatusResponse>* PrepareAsyncUpdateVoiceStatusRaw(::grpc::ClientContext* context, const ::qtstat::VoiceStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::qtstat::DisplayResponse>* AsyncPushDisplayInfoRaw(::grpc::ClientContext* context, const ::qtstat::DisplayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::qtstat::DisplayResponse>* PrepareAsyncPushDisplayInfoRaw(::grpc::ClientContext* context, const ::qtstat::DisplayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>* AsyncGetStateRaw(::grpc::ClientContext* context, const ::qtstat::HvacStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>* PrepareAsyncGetStateRaw(::grpc::ClientContext* context, const ::qtstat::HvacStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>* AsyncSetSetpointRaw(::grpc::ClientContext* context, const ::qtstat::FloatValue& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>* PrepareAsyncSetSetpointRaw(::grpc::ClientContext* context, const ::qtstat::FloatValue& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>* AsyncSetHeatSetpointRaw(::grpc::ClientContext* context, const ::qtstat::FloatValue& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>* PrepareAsyncSetHeatSetpointRaw(::grpc::ClientContext* context, const ::qtstat::FloatValue& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>* AsyncSetCoolSetpointRaw(::grpc::ClientContext* context, const ::qtstat::FloatValue& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>* PrepareAsyncSetCoolSetpointRaw(::grpc::ClientContext* context, const ::qtstat::FloatValue& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>* AsyncSetHvacModeRaw(::grpc::ClientContext* context, const ::qtstat::HvacMode& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>* PrepareAsyncSetHvacModeRaw(::grpc::ClientContext* context, const ::qtstat::HvacMode& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>* AsyncSetFanModeRaw(::grpc::ClientContext* context, const ::qtstat::FanMode& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::qtstat::HvacStateResponse>* PrepareAsyncSetFanModeRaw(::grpc::ClientContext* context, const ::qtstat::FanMode& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateVoiceStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_PushDisplayInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_GetState_;
    const ::grpc::internal::RpcMethod rpcmethod_SetSetpoint_;
    const ::grpc::internal::RpcMethod rpcmethod_SetHeatSetpoint_;
    const ::grpc::internal::RpcMethod rpcmethod_SetCoolSetpoint_;
    const ::grpc::internal::RpcMethod rpcmethod_SetHvacMode_;
    const ::grpc::internal::RpcMethod rpcmethod_SetFanMode_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status UpdateVoiceStatus(::grpc::ServerContext* context, const ::qtstat::VoiceStatusRequest* request, ::qtstat::VoiceStatusResponse* response);
    virtual ::grpc::Status PushDisplayInfo(::grpc::ServerContext* context, const ::qtstat::DisplayRequest* request, ::qtstat::DisplayResponse* response);
    virtual ::grpc::Status GetState(::grpc::ServerContext* context, const ::qtstat::HvacStateRequest* request, ::qtstat::HvacStateResponse* response);
    virtual ::grpc::Status SetSetpoint(::grpc::ServerContext* context, const ::qtstat::FloatValue* request, ::qtstat::HvacStateResponse* response);
    virtual ::grpc::Status SetHeatSetpoint(::grpc::ServerContext* context, const ::qtstat::FloatValue* request, ::qtstat::HvacStateResponse* response);
    virtual ::grpc::Status SetCoolSetpoint(::grpc::ServerContext* context, const ::qtstat::FloatValue* request, ::qtstat::HvacStateResponse* response);
    virtual ::grpc::Status SetHvacMode(::grpc::ServerContext* context, const ::qtstat::HvacMode* request, ::qtstat::HvacStateResponse* response);
    virtual ::grpc::Status SetFanMode(::grpc::ServerContext* context, const ::qtstat::FanMode* request, ::qtstat::HvacStateResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateVoiceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateVoiceStatus() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_UpdateVoiceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateVoiceStatus(::grpc::ServerContext* context, const ::qtstat::VoiceStatusRequest* request, ::qtstat::VoiceStatusResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateVoiceStatus(::grpc::ServerContext* context, ::qtstat::VoiceStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::qtstat::VoiceStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PushDisplayInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PushDisplayInfo() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_PushDisplayInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushDisplayInfo(::grpc::ServerContext* context, const ::qtstat::DisplayRequest* request, ::qtstat::DisplayResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushDisplayInfo(::grpc::ServerContext* context, ::qtstat::DisplayRequest* request, ::grpc::ServerAsyncResponseWriter< ::qtstat::DisplayResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetState() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetState(::grpc::ServerContext* context, const ::qtstat::HvacStateRequest* request, ::qtstat::HvacStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetState(::grpc::ServerContext* context, ::qtstat::HvacStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::qtstat::HvacStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetSetpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetSetpoint() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SetSetpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSetpoint(::grpc::ServerContext* context, const ::qtstat::FloatValue* request, ::qtstat::HvacStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetSetpoint(::grpc::ServerContext* context, ::qtstat::FloatValue* request, ::grpc::ServerAsyncResponseWriter< ::qtstat::HvacStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetHeatSetpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetHeatSetpoint() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SetHeatSetpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetHeatSetpoint(::grpc::ServerContext* context, const ::qtstat::FloatValue* request, ::qtstat::HvacStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetHeatSetpoint(::grpc::ServerContext* context, ::qtstat::FloatValue* request, ::grpc::ServerAsyncResponseWriter< ::qtstat::HvacStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetCoolSetpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetCoolSetpoint() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SetCoolSetpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCoolSetpoint(::grpc::ServerContext* context, const ::qtstat::FloatValue* request, ::qtstat::HvacStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetCoolSetpoint(::grpc::ServerContext* context, ::qtstat::FloatValue* request, ::grpc::ServerAsyncResponseWriter< ::qtstat::HvacStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetHvacMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetHvacMode() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_SetHvacMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetHvacMode(::grpc::ServerContext* context, const ::qtstat::HvacMode* request, ::qtstat::HvacStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetHvacMode(::grpc::ServerContext* context, ::qtstat::HvacMode* request, ::grpc::ServerAsyncResponseWriter< ::qtstat::HvacStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetFanMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetFanMode() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_SetFanMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFanMode(::grpc::ServerContext* context, const ::qtstat::FanMode* request, ::qtstat::HvacStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetFanMode(::grpc::ServerContext* context, ::qtstat::FanMode* request, ::grpc::ServerAsyncResponseWriter< ::qtstat::HvacStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_UpdateVoiceStatus<WithAsyncMethod_PushDisplayInfo<WithAsyncMethod_GetState<WithAsyncMethod_SetSetpoint<WithAsyncMethod_SetHeatSetpoint<WithAsyncMethod_SetCoolSetpoint<WithAsyncMethod_SetHvacMode<WithAsyncMethod_SetFanMode<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_UpdateVoiceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateVoiceStatus() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_UpdateVoiceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateVoiceStatus(::grpc::ServerContext* context, const ::qtstat::VoiceStatusRequest* request, ::qtstat::VoiceStatusResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PushDisplayInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PushDisplayInfo() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_PushDisplayInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushDisplayInfo(::grpc::ServerContext* context, const ::qtstat::DisplayRequest* request, ::qtstat::DisplayResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetState() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetState(::grpc::ServerContext* context, const ::qtstat::HvacStateRequest* request, ::qtstat::HvacStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetSetpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetSetpoint() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SetSetpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSetpoint(::grpc::ServerContext* context, const ::qtstat::FloatValue* request, ::qtstat::HvacStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetHeatSetpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetHeatSetpoint() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SetHeatSetpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetHeatSetpoint(::grpc::ServerContext* context, const ::qtstat::FloatValue* request, ::qtstat::HvacStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetCoolSetpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetCoolSetpoint() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SetCoolSetpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCoolSetpoint(::grpc::ServerContext* context, const ::qtstat::FloatValue* request, ::qtstat::HvacStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetHvacMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetHvacMode() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_SetHvacMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetHvacMode(::grpc::ServerContext* context, const ::qtstat::HvacMode* request, ::qtstat::HvacStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetFanMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetFanMode() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_SetFanMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFanMode(::grpc::ServerContext* context, const ::qtstat::FanMode* request, ::qtstat::HvacStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateVoiceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateVoiceStatus() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::qtstat::VoiceStatusRequest, ::qtstat::VoiceStatusResponse>(std::bind(&WithStreamedUnaryMethod_UpdateVoiceStatus<BaseClass>::StreamedUpdateVoiceStatus, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateVoiceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateVoiceStatus(::grpc::ServerContext* context, const ::qtstat::VoiceStatusRequest* request, ::qtstat::VoiceStatusResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateVoiceStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::qtstat::VoiceStatusRequest,::qtstat::VoiceStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PushDisplayInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PushDisplayInfo() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::qtstat::DisplayRequest, ::qtstat::DisplayResponse>(std::bind(&WithStreamedUnaryMethod_PushDisplayInfo<BaseClass>::StreamedPushDisplayInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PushDisplayInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PushDisplayInfo(::grpc::ServerContext* context, const ::qtstat::DisplayRequest* request, ::qtstat::DisplayResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPushDisplayInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::qtstat::DisplayRequest,::qtstat::DisplayResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetState() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::qtstat::HvacStateRequest, ::qtstat::HvacStateResponse>(std::bind(&WithStreamedUnaryMethod_GetState<BaseClass>::StreamedGetState, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetState(::grpc::ServerContext* context, const ::qtstat::HvacStateRequest* request, ::qtstat::HvacStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::qtstat::HvacStateRequest,::qtstat::HvacStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetSetpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetSetpoint() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::qtstat::FloatValue, ::qtstat::HvacStateResponse>(std::bind(&WithStreamedUnaryMethod_SetSetpoint<BaseClass>::StreamedSetSetpoint, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetSetpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetSetpoint(::grpc::ServerContext* context, const ::qtstat::FloatValue* request, ::qtstat::HvacStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetSetpoint(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::qtstat::FloatValue,::qtstat::HvacStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetHeatSetpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetHeatSetpoint() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::qtstat::FloatValue, ::qtstat::HvacStateResponse>(std::bind(&WithStreamedUnaryMethod_SetHeatSetpoint<BaseClass>::StreamedSetHeatSetpoint, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetHeatSetpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetHeatSetpoint(::grpc::ServerContext* context, const ::qtstat::FloatValue* request, ::qtstat::HvacStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetHeatSetpoint(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::qtstat::FloatValue,::qtstat::HvacStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetCoolSetpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetCoolSetpoint() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::qtstat::FloatValue, ::qtstat::HvacStateResponse>(std::bind(&WithStreamedUnaryMethod_SetCoolSetpoint<BaseClass>::StreamedSetCoolSetpoint, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetCoolSetpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetCoolSetpoint(::grpc::ServerContext* context, const ::qtstat::FloatValue* request, ::qtstat::HvacStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetCoolSetpoint(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::qtstat::FloatValue,::qtstat::HvacStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetHvacMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetHvacMode() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::qtstat::HvacMode, ::qtstat::HvacStateResponse>(std::bind(&WithStreamedUnaryMethod_SetHvacMode<BaseClass>::StreamedSetHvacMode, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetHvacMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetHvacMode(::grpc::ServerContext* context, const ::qtstat::HvacMode* request, ::qtstat::HvacStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetHvacMode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::qtstat::HvacMode,::qtstat::HvacStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetFanMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetFanMode() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::qtstat::FanMode, ::qtstat::HvacStateResponse>(std::bind(&WithStreamedUnaryMethod_SetFanMode<BaseClass>::StreamedSetFanMode, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetFanMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetFanMode(::grpc::ServerContext* context, const ::qtstat::FanMode* request, ::qtstat::HvacStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetFanMode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::qtstat::FanMode,::qtstat::HvacStateResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_UpdateVoiceStatus<WithStreamedUnaryMethod_PushDisplayInfo<WithStreamedUnaryMethod_GetState<WithStreamedUnaryMethod_SetSetpoint<WithStreamedUnaryMethod_SetHeatSetpoint<WithStreamedUnaryMethod_SetCoolSetpoint<WithStreamedUnaryMethod_SetHvacMode<WithStreamedUnaryMethod_SetFanMode<Service > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_UpdateVoiceStatus<WithStreamedUnaryMethod_PushDisplayInfo<WithStreamedUnaryMethod_GetState<WithStreamedUnaryMethod_SetSetpoint<WithStreamedUnaryMethod_SetHeatSetpoint<WithStreamedUnaryMethod_SetCoolSetpoint<WithStreamedUnaryMethod_SetHvacMode<WithStreamedUnaryMethod_SetFanMode<Service > > > > > > > > StreamedService;
};

}  // namespace qtstat


#endif  // GRPC_qtstat_2eproto__INCLUDED
