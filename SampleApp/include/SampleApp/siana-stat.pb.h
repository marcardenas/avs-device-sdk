// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: siana-stat.proto

#ifndef PROTOBUF_siana_2dstat_2eproto__INCLUDED
#define PROTOBUF_siana_2dstat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_siana_2dstat_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[12];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsEmptyImpl();
void InitDefaultsEmpty();
void InitDefaultsVoiceAssistantRequestImpl();
void InitDefaultsVoiceAssistantRequest();
void InitDefaultsVoiceAssistantResponseImpl();
void InitDefaultsVoiceAssistantResponse();
void InitDefaultsVoiceStateRequestImpl();
void InitDefaultsVoiceStateRequest();
void InitDefaultsVoiceStateResponseImpl();
void InitDefaultsVoiceStateResponse();
void InitDefaultsFloatValueImpl();
void InitDefaultsFloatValue();
void InitDefaultsHvacModeImpl();
void InitDefaultsHvacMode();
void InitDefaultsFanModeImpl();
void InitDefaultsFanMode();
void InitDefaultsHvacStateRequestImpl();
void InitDefaultsHvacStateRequest();
void InitDefaultsHvacStateResponseImpl();
void InitDefaultsHvacStateResponse();
void InitDefaultsDisplayRequestImpl();
void InitDefaultsDisplayRequest();
void InitDefaultsDisplayResponseImpl();
void InitDefaultsDisplayResponse();
inline void InitDefaults() {
  InitDefaultsEmpty();
  InitDefaultsVoiceAssistantRequest();
  InitDefaultsVoiceAssistantResponse();
  InitDefaultsVoiceStateRequest();
  InitDefaultsVoiceStateResponse();
  InitDefaultsFloatValue();
  InitDefaultsHvacMode();
  InitDefaultsFanMode();
  InitDefaultsHvacStateRequest();
  InitDefaultsHvacStateResponse();
  InitDefaultsDisplayRequest();
  InitDefaultsDisplayResponse();
}
}  // namespace protobuf_siana_2dstat_2eproto
class DisplayRequest;
class DisplayRequestDefaultTypeInternal;
extern DisplayRequestDefaultTypeInternal _DisplayRequest_default_instance_;
class DisplayResponse;
class DisplayResponseDefaultTypeInternal;
extern DisplayResponseDefaultTypeInternal _DisplayResponse_default_instance_;
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class FanMode;
class FanModeDefaultTypeInternal;
extern FanModeDefaultTypeInternal _FanMode_default_instance_;
class FloatValue;
class FloatValueDefaultTypeInternal;
extern FloatValueDefaultTypeInternal _FloatValue_default_instance_;
class HvacMode;
class HvacModeDefaultTypeInternal;
extern HvacModeDefaultTypeInternal _HvacMode_default_instance_;
class HvacStateRequest;
class HvacStateRequestDefaultTypeInternal;
extern HvacStateRequestDefaultTypeInternal _HvacStateRequest_default_instance_;
class HvacStateResponse;
class HvacStateResponseDefaultTypeInternal;
extern HvacStateResponseDefaultTypeInternal _HvacStateResponse_default_instance_;
class VoiceAssistantRequest;
class VoiceAssistantRequestDefaultTypeInternal;
extern VoiceAssistantRequestDefaultTypeInternal _VoiceAssistantRequest_default_instance_;
class VoiceAssistantResponse;
class VoiceAssistantResponseDefaultTypeInternal;
extern VoiceAssistantResponseDefaultTypeInternal _VoiceAssistantResponse_default_instance_;
class VoiceStateRequest;
class VoiceStateRequestDefaultTypeInternal;
extern VoiceStateRequestDefaultTypeInternal _VoiceStateRequest_default_instance_;
class VoiceStateResponse;
class VoiceStateResponseDefaultTypeInternal;
extern VoiceStateResponseDefaultTypeInternal _VoiceStateResponse_default_instance_;

enum HvacMode_Enum {
  HvacMode_Enum_HVAC_OFF = 0,
  HvacMode_Enum_HVAC_HEAT = 1,
  HvacMode_Enum_HVAC_COOL = 2,
  HvacMode_Enum_HVAC_AUTO = 3,
  HvacMode_Enum_HvacMode_Enum_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  HvacMode_Enum_HvacMode_Enum_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool HvacMode_Enum_IsValid(int value);
const HvacMode_Enum HvacMode_Enum_Enum_MIN = HvacMode_Enum_HVAC_OFF;
const HvacMode_Enum HvacMode_Enum_Enum_MAX = HvacMode_Enum_HVAC_AUTO;
const int HvacMode_Enum_Enum_ARRAYSIZE = HvacMode_Enum_Enum_MAX + 1;

const ::google::protobuf::EnumDescriptor* HvacMode_Enum_descriptor();
inline const ::std::string& HvacMode_Enum_Name(HvacMode_Enum value) {
  return ::google::protobuf::internal::NameOfEnum(
    HvacMode_Enum_descriptor(), value);
}
inline bool HvacMode_Enum_Parse(
    const ::std::string& name, HvacMode_Enum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HvacMode_Enum>(
    HvacMode_Enum_descriptor(), name, value);
}
enum FanMode_Enum {
  FanMode_Enum_FAN_OFF = 0,
  FanMode_Enum_FAN_ON = 1,
  FanMode_Enum_FAN_CIRC = 2,
  FanMode_Enum_FanMode_Enum_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FanMode_Enum_FanMode_Enum_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FanMode_Enum_IsValid(int value);
const FanMode_Enum FanMode_Enum_Enum_MIN = FanMode_Enum_FAN_OFF;
const FanMode_Enum FanMode_Enum_Enum_MAX = FanMode_Enum_FAN_CIRC;
const int FanMode_Enum_Enum_ARRAYSIZE = FanMode_Enum_Enum_MAX + 1;

const ::google::protobuf::EnumDescriptor* FanMode_Enum_descriptor();
inline const ::std::string& FanMode_Enum_Name(FanMode_Enum value) {
  return ::google::protobuf::internal::NameOfEnum(
    FanMode_Enum_descriptor(), value);
}
inline bool FanMode_Enum_Parse(
    const ::std::string& name, FanMode_Enum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FanMode_Enum>(
    FanMode_Enum_descriptor(), name, value);
}
enum VoiceAssistant {
  VOICE_ASSISTANT_UNKNOWN = 0,
  VOICE_ASSISTANT_AVS = 1,
  VOICE_ASSISTANT_GVA = 2,
  VOICE_ASSISTANT_NONE = 3,
  VoiceAssistant_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VoiceAssistant_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VoiceAssistant_IsValid(int value);
const VoiceAssistant VoiceAssistant_MIN = VOICE_ASSISTANT_UNKNOWN;
const VoiceAssistant VoiceAssistant_MAX = VOICE_ASSISTANT_NONE;
const int VoiceAssistant_ARRAYSIZE = VoiceAssistant_MAX + 1;

const ::google::protobuf::EnumDescriptor* VoiceAssistant_descriptor();
inline const ::std::string& VoiceAssistant_Name(VoiceAssistant value) {
  return ::google::protobuf::internal::NameOfEnum(
    VoiceAssistant_descriptor(), value);
}
inline bool VoiceAssistant_Parse(
    const ::std::string& name, VoiceAssistant* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VoiceAssistant>(
    VoiceAssistant_descriptor(), name, value);
}
enum VoiceAssistantState {
  VA_UNKNOWN = 0,
  VA_IDLE = 1,
  VA_LISTENING = 2,
  VA_PROCESSING = 3,
  VoiceAssistantState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VoiceAssistantState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VoiceAssistantState_IsValid(int value);
const VoiceAssistantState VoiceAssistantState_MIN = VA_UNKNOWN;
const VoiceAssistantState VoiceAssistantState_MAX = VA_PROCESSING;
const int VoiceAssistantState_ARRAYSIZE = VoiceAssistantState_MAX + 1;

const ::google::protobuf::EnumDescriptor* VoiceAssistantState_descriptor();
inline const ::std::string& VoiceAssistantState_Name(VoiceAssistantState value) {
  return ::google::protobuf::internal::NameOfEnum(
    VoiceAssistantState_descriptor(), value);
}
inline bool VoiceAssistantState_Parse(
    const ::std::string& name, VoiceAssistantState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VoiceAssistantState>(
    VoiceAssistantState_descriptor(), name, value);
}
enum VoiceAssistantStatus {
  VA_STATUS_UNKNOWN = 0,
  VA_STATUS_OPEN = 1,
  VA_STATUS_CLOSED = 2,
  VA_STATUS_UNREGISTERED = 3,
  VoiceAssistantStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VoiceAssistantStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VoiceAssistantStatus_IsValid(int value);
const VoiceAssistantStatus VoiceAssistantStatus_MIN = VA_STATUS_UNKNOWN;
const VoiceAssistantStatus VoiceAssistantStatus_MAX = VA_STATUS_UNREGISTERED;
const int VoiceAssistantStatus_ARRAYSIZE = VoiceAssistantStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* VoiceAssistantStatus_descriptor();
inline const ::std::string& VoiceAssistantStatus_Name(VoiceAssistantStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    VoiceAssistantStatus_descriptor(), value);
}
inline bool VoiceAssistantStatus_Parse(
    const ::std::string& name, VoiceAssistantStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VoiceAssistantStatus>(
    VoiceAssistantStatus_descriptor(), name, value);
}
// ===================================================================

class Empty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Empty) */ {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Empty* other);
  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const PROTOBUF_FINAL { return New(NULL); }

  Empty* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Empty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Empty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_siana_2dstat_2eproto::TableStruct;
  friend void ::protobuf_siana_2dstat_2eproto::InitDefaultsEmptyImpl();
};
// -------------------------------------------------------------------

class VoiceAssistantRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VoiceAssistantRequest) */ {
 public:
  VoiceAssistantRequest();
  virtual ~VoiceAssistantRequest();

  VoiceAssistantRequest(const VoiceAssistantRequest& from);

  inline VoiceAssistantRequest& operator=(const VoiceAssistantRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VoiceAssistantRequest(VoiceAssistantRequest&& from) noexcept
    : VoiceAssistantRequest() {
    *this = ::std::move(from);
  }

  inline VoiceAssistantRequest& operator=(VoiceAssistantRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VoiceAssistantRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VoiceAssistantRequest* internal_default_instance() {
    return reinterpret_cast<const VoiceAssistantRequest*>(
               &_VoiceAssistantRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(VoiceAssistantRequest* other);
  friend void swap(VoiceAssistantRequest& a, VoiceAssistantRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VoiceAssistantRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  VoiceAssistantRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoiceAssistantRequest& from);
  void MergeFrom(const VoiceAssistantRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoiceAssistantRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .VoiceAssistant assistant_request = 1;
  void clear_assistant_request();
  static const int kAssistantRequestFieldNumber = 1;
  ::VoiceAssistant assistant_request() const;
  void set_assistant_request(::VoiceAssistant value);

  // @@protoc_insertion_point(class_scope:VoiceAssistantRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int assistant_request_;
  mutable int _cached_size_;
  friend struct ::protobuf_siana_2dstat_2eproto::TableStruct;
  friend void ::protobuf_siana_2dstat_2eproto::InitDefaultsVoiceAssistantRequestImpl();
};
// -------------------------------------------------------------------

class VoiceAssistantResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VoiceAssistantResponse) */ {
 public:
  VoiceAssistantResponse();
  virtual ~VoiceAssistantResponse();

  VoiceAssistantResponse(const VoiceAssistantResponse& from);

  inline VoiceAssistantResponse& operator=(const VoiceAssistantResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VoiceAssistantResponse(VoiceAssistantResponse&& from) noexcept
    : VoiceAssistantResponse() {
    *this = ::std::move(from);
  }

  inline VoiceAssistantResponse& operator=(VoiceAssistantResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VoiceAssistantResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VoiceAssistantResponse* internal_default_instance() {
    return reinterpret_cast<const VoiceAssistantResponse*>(
               &_VoiceAssistantResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(VoiceAssistantResponse* other);
  friend void swap(VoiceAssistantResponse& a, VoiceAssistantResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VoiceAssistantResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  VoiceAssistantResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoiceAssistantResponse& from);
  void MergeFrom(const VoiceAssistantResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoiceAssistantResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .VoiceAssistantStatus status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::VoiceAssistantStatus status() const;
  void set_status(::VoiceAssistantStatus value);

  // @@protoc_insertion_point(class_scope:VoiceAssistantResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int status_;
  mutable int _cached_size_;
  friend struct ::protobuf_siana_2dstat_2eproto::TableStruct;
  friend void ::protobuf_siana_2dstat_2eproto::InitDefaultsVoiceAssistantResponseImpl();
};
// -------------------------------------------------------------------

class VoiceStateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VoiceStateRequest) */ {
 public:
  VoiceStateRequest();
  virtual ~VoiceStateRequest();

  VoiceStateRequest(const VoiceStateRequest& from);

  inline VoiceStateRequest& operator=(const VoiceStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VoiceStateRequest(VoiceStateRequest&& from) noexcept
    : VoiceStateRequest() {
    *this = ::std::move(from);
  }

  inline VoiceStateRequest& operator=(VoiceStateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VoiceStateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VoiceStateRequest* internal_default_instance() {
    return reinterpret_cast<const VoiceStateRequest*>(
               &_VoiceStateRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(VoiceStateRequest* other);
  friend void swap(VoiceStateRequest& a, VoiceStateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VoiceStateRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  VoiceStateRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoiceStateRequest& from);
  void MergeFrom(const VoiceStateRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoiceStateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .VoiceAssistant assistant = 1;
  void clear_assistant();
  static const int kAssistantFieldNumber = 1;
  ::VoiceAssistant assistant() const;
  void set_assistant(::VoiceAssistant value);

  // .VoiceAssistantState state = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::VoiceAssistantState state() const;
  void set_state(::VoiceAssistantState value);

  // @@protoc_insertion_point(class_scope:VoiceStateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int assistant_;
  int state_;
  mutable int _cached_size_;
  friend struct ::protobuf_siana_2dstat_2eproto::TableStruct;
  friend void ::protobuf_siana_2dstat_2eproto::InitDefaultsVoiceStateRequestImpl();
};
// -------------------------------------------------------------------

class VoiceStateResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VoiceStateResponse) */ {
 public:
  VoiceStateResponse();
  virtual ~VoiceStateResponse();

  VoiceStateResponse(const VoiceStateResponse& from);

  inline VoiceStateResponse& operator=(const VoiceStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VoiceStateResponse(VoiceStateResponse&& from) noexcept
    : VoiceStateResponse() {
    *this = ::std::move(from);
  }

  inline VoiceStateResponse& operator=(VoiceStateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VoiceStateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VoiceStateResponse* internal_default_instance() {
    return reinterpret_cast<const VoiceStateResponse*>(
               &_VoiceStateResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(VoiceStateResponse* other);
  friend void swap(VoiceStateResponse& a, VoiceStateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VoiceStateResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  VoiceStateResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoiceStateResponse& from);
  void MergeFrom(const VoiceStateResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoiceStateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:VoiceStateResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_siana_2dstat_2eproto::TableStruct;
  friend void ::protobuf_siana_2dstat_2eproto::InitDefaultsVoiceStateResponseImpl();
};
// -------------------------------------------------------------------

class FloatValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FloatValue) */ {
 public:
  FloatValue();
  virtual ~FloatValue();

  FloatValue(const FloatValue& from);

  inline FloatValue& operator=(const FloatValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FloatValue(FloatValue&& from) noexcept
    : FloatValue() {
    *this = ::std::move(from);
  }

  inline FloatValue& operator=(FloatValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FloatValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FloatValue* internal_default_instance() {
    return reinterpret_cast<const FloatValue*>(
               &_FloatValue_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(FloatValue* other);
  friend void swap(FloatValue& a, FloatValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FloatValue* New() const PROTOBUF_FINAL { return New(NULL); }

  FloatValue* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FloatValue& from);
  void MergeFrom(const FloatValue& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FloatValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  float value() const;
  void set_value(float value);

  // @@protoc_insertion_point(class_scope:FloatValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float value_;
  mutable int _cached_size_;
  friend struct ::protobuf_siana_2dstat_2eproto::TableStruct;
  friend void ::protobuf_siana_2dstat_2eproto::InitDefaultsFloatValueImpl();
};
// -------------------------------------------------------------------

class HvacMode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HvacMode) */ {
 public:
  HvacMode();
  virtual ~HvacMode();

  HvacMode(const HvacMode& from);

  inline HvacMode& operator=(const HvacMode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HvacMode(HvacMode&& from) noexcept
    : HvacMode() {
    *this = ::std::move(from);
  }

  inline HvacMode& operator=(HvacMode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HvacMode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HvacMode* internal_default_instance() {
    return reinterpret_cast<const HvacMode*>(
               &_HvacMode_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(HvacMode* other);
  friend void swap(HvacMode& a, HvacMode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HvacMode* New() const PROTOBUF_FINAL { return New(NULL); }

  HvacMode* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HvacMode& from);
  void MergeFrom(const HvacMode& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HvacMode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef HvacMode_Enum Enum;
  static const Enum HVAC_OFF =
    HvacMode_Enum_HVAC_OFF;
  static const Enum HVAC_HEAT =
    HvacMode_Enum_HVAC_HEAT;
  static const Enum HVAC_COOL =
    HvacMode_Enum_HVAC_COOL;
  static const Enum HVAC_AUTO =
    HvacMode_Enum_HVAC_AUTO;
  static inline bool Enum_IsValid(int value) {
    return HvacMode_Enum_IsValid(value);
  }
  static const Enum Enum_MIN =
    HvacMode_Enum_Enum_MIN;
  static const Enum Enum_MAX =
    HvacMode_Enum_Enum_MAX;
  static const int Enum_ARRAYSIZE =
    HvacMode_Enum_Enum_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Enum_descriptor() {
    return HvacMode_Enum_descriptor();
  }
  static inline const ::std::string& Enum_Name(Enum value) {
    return HvacMode_Enum_Name(value);
  }
  static inline bool Enum_Parse(const ::std::string& name,
      Enum* value) {
    return HvacMode_Enum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:HvacMode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_siana_2dstat_2eproto::TableStruct;
  friend void ::protobuf_siana_2dstat_2eproto::InitDefaultsHvacModeImpl();
};
// -------------------------------------------------------------------

class FanMode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FanMode) */ {
 public:
  FanMode();
  virtual ~FanMode();

  FanMode(const FanMode& from);

  inline FanMode& operator=(const FanMode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FanMode(FanMode&& from) noexcept
    : FanMode() {
    *this = ::std::move(from);
  }

  inline FanMode& operator=(FanMode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FanMode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FanMode* internal_default_instance() {
    return reinterpret_cast<const FanMode*>(
               &_FanMode_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(FanMode* other);
  friend void swap(FanMode& a, FanMode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FanMode* New() const PROTOBUF_FINAL { return New(NULL); }

  FanMode* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FanMode& from);
  void MergeFrom(const FanMode& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FanMode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef FanMode_Enum Enum;
  static const Enum FAN_OFF =
    FanMode_Enum_FAN_OFF;
  static const Enum FAN_ON =
    FanMode_Enum_FAN_ON;
  static const Enum FAN_CIRC =
    FanMode_Enum_FAN_CIRC;
  static inline bool Enum_IsValid(int value) {
    return FanMode_Enum_IsValid(value);
  }
  static const Enum Enum_MIN =
    FanMode_Enum_Enum_MIN;
  static const Enum Enum_MAX =
    FanMode_Enum_Enum_MAX;
  static const int Enum_ARRAYSIZE =
    FanMode_Enum_Enum_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Enum_descriptor() {
    return FanMode_Enum_descriptor();
  }
  static inline const ::std::string& Enum_Name(Enum value) {
    return FanMode_Enum_Name(value);
  }
  static inline bool Enum_Parse(const ::std::string& name,
      Enum* value) {
    return FanMode_Enum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:FanMode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_siana_2dstat_2eproto::TableStruct;
  friend void ::protobuf_siana_2dstat_2eproto::InitDefaultsFanModeImpl();
};
// -------------------------------------------------------------------

class HvacStateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HvacStateRequest) */ {
 public:
  HvacStateRequest();
  virtual ~HvacStateRequest();

  HvacStateRequest(const HvacStateRequest& from);

  inline HvacStateRequest& operator=(const HvacStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HvacStateRequest(HvacStateRequest&& from) noexcept
    : HvacStateRequest() {
    *this = ::std::move(from);
  }

  inline HvacStateRequest& operator=(HvacStateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HvacStateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HvacStateRequest* internal_default_instance() {
    return reinterpret_cast<const HvacStateRequest*>(
               &_HvacStateRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(HvacStateRequest* other);
  friend void swap(HvacStateRequest& a, HvacStateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HvacStateRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  HvacStateRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HvacStateRequest& from);
  void MergeFrom(const HvacStateRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HvacStateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:HvacStateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_siana_2dstat_2eproto::TableStruct;
  friend void ::protobuf_siana_2dstat_2eproto::InitDefaultsHvacStateRequestImpl();
};
// -------------------------------------------------------------------

class HvacStateResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HvacStateResponse) */ {
 public:
  HvacStateResponse();
  virtual ~HvacStateResponse();

  HvacStateResponse(const HvacStateResponse& from);

  inline HvacStateResponse& operator=(const HvacStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HvacStateResponse(HvacStateResponse&& from) noexcept
    : HvacStateResponse() {
    *this = ::std::move(from);
  }

  inline HvacStateResponse& operator=(HvacStateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HvacStateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HvacStateResponse* internal_default_instance() {
    return reinterpret_cast<const HvacStateResponse*>(
               &_HvacStateResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(HvacStateResponse* other);
  friend void swap(HvacStateResponse& a, HvacStateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HvacStateResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  HvacStateResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HvacStateResponse& from);
  void MergeFrom(const HvacStateResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HvacStateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .HvacMode mode = 4;
  bool has_mode() const;
  void clear_mode();
  static const int kModeFieldNumber = 4;
  const ::HvacMode& mode() const;
  ::HvacMode* release_mode();
  ::HvacMode* mutable_mode();
  void set_allocated_mode(::HvacMode* mode);

  // .FanMode fan = 5;
  bool has_fan() const;
  void clear_fan();
  static const int kFanFieldNumber = 5;
  const ::FanMode& fan() const;
  ::FanMode* release_fan();
  ::FanMode* mutable_fan();
  void set_allocated_fan(::FanMode* fan);

  // float sp = 1;
  void clear_sp();
  static const int kSpFieldNumber = 1;
  float sp() const;
  void set_sp(float value);

  // float hsp = 2;
  void clear_hsp();
  static const int kHspFieldNumber = 2;
  float hsp() const;
  void set_hsp(float value);

  // float csp = 3;
  void clear_csp();
  static const int kCspFieldNumber = 3;
  float csp() const;
  void set_csp(float value);

  // @@protoc_insertion_point(class_scope:HvacStateResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::HvacMode* mode_;
  ::FanMode* fan_;
  float sp_;
  float hsp_;
  float csp_;
  mutable int _cached_size_;
  friend struct ::protobuf_siana_2dstat_2eproto::TableStruct;
  friend void ::protobuf_siana_2dstat_2eproto::InitDefaultsHvacStateResponseImpl();
};
// -------------------------------------------------------------------

class DisplayRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DisplayRequest) */ {
 public:
  DisplayRequest();
  virtual ~DisplayRequest();

  DisplayRequest(const DisplayRequest& from);

  inline DisplayRequest& operator=(const DisplayRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DisplayRequest(DisplayRequest&& from) noexcept
    : DisplayRequest() {
    *this = ::std::move(from);
  }

  inline DisplayRequest& operator=(DisplayRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DisplayRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisplayRequest* internal_default_instance() {
    return reinterpret_cast<const DisplayRequest*>(
               &_DisplayRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(DisplayRequest* other);
  friend void swap(DisplayRequest& a, DisplayRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DisplayRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DisplayRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DisplayRequest& from);
  void MergeFrom(const DisplayRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DisplayRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // string url = 2;
  void clear_url();
  static const int kUrlFieldNumber = 2;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:DisplayRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  mutable int _cached_size_;
  friend struct ::protobuf_siana_2dstat_2eproto::TableStruct;
  friend void ::protobuf_siana_2dstat_2eproto::InitDefaultsDisplayRequestImpl();
};
// -------------------------------------------------------------------

class DisplayResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DisplayResponse) */ {
 public:
  DisplayResponse();
  virtual ~DisplayResponse();

  DisplayResponse(const DisplayResponse& from);

  inline DisplayResponse& operator=(const DisplayResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DisplayResponse(DisplayResponse&& from) noexcept
    : DisplayResponse() {
    *this = ::std::move(from);
  }

  inline DisplayResponse& operator=(DisplayResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DisplayResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisplayResponse* internal_default_instance() {
    return reinterpret_cast<const DisplayResponse*>(
               &_DisplayResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(DisplayResponse* other);
  friend void swap(DisplayResponse& a, DisplayResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DisplayResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DisplayResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DisplayResponse& from);
  void MergeFrom(const DisplayResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DisplayResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:DisplayResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_siana_2dstat_2eproto::TableStruct;
  friend void ::protobuf_siana_2dstat_2eproto::InitDefaultsDisplayResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Empty

// -------------------------------------------------------------------

// VoiceAssistantRequest

// .VoiceAssistant assistant_request = 1;
inline void VoiceAssistantRequest::clear_assistant_request() {
  assistant_request_ = 0;
}
inline ::VoiceAssistant VoiceAssistantRequest::assistant_request() const {
  // @@protoc_insertion_point(field_get:VoiceAssistantRequest.assistant_request)
  return static_cast< ::VoiceAssistant >(assistant_request_);
}
inline void VoiceAssistantRequest::set_assistant_request(::VoiceAssistant value) {
  
  assistant_request_ = value;
  // @@protoc_insertion_point(field_set:VoiceAssistantRequest.assistant_request)
}

// -------------------------------------------------------------------

// VoiceAssistantResponse

// .VoiceAssistantStatus status = 1;
inline void VoiceAssistantResponse::clear_status() {
  status_ = 0;
}
inline ::VoiceAssistantStatus VoiceAssistantResponse::status() const {
  // @@protoc_insertion_point(field_get:VoiceAssistantResponse.status)
  return static_cast< ::VoiceAssistantStatus >(status_);
}
inline void VoiceAssistantResponse::set_status(::VoiceAssistantStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:VoiceAssistantResponse.status)
}

// -------------------------------------------------------------------

// VoiceStateRequest

// .VoiceAssistant assistant = 1;
inline void VoiceStateRequest::clear_assistant() {
  assistant_ = 0;
}
inline ::VoiceAssistant VoiceStateRequest::assistant() const {
  // @@protoc_insertion_point(field_get:VoiceStateRequest.assistant)
  return static_cast< ::VoiceAssistant >(assistant_);
}
inline void VoiceStateRequest::set_assistant(::VoiceAssistant value) {
  
  assistant_ = value;
  // @@protoc_insertion_point(field_set:VoiceStateRequest.assistant)
}

// .VoiceAssistantState state = 2;
inline void VoiceStateRequest::clear_state() {
  state_ = 0;
}
inline ::VoiceAssistantState VoiceStateRequest::state() const {
  // @@protoc_insertion_point(field_get:VoiceStateRequest.state)
  return static_cast< ::VoiceAssistantState >(state_);
}
inline void VoiceStateRequest::set_state(::VoiceAssistantState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:VoiceStateRequest.state)
}

// -------------------------------------------------------------------

// VoiceStateResponse

// -------------------------------------------------------------------

// FloatValue

// float value = 1;
inline void FloatValue::clear_value() {
  value_ = 0;
}
inline float FloatValue::value() const {
  // @@protoc_insertion_point(field_get:FloatValue.value)
  return value_;
}
inline void FloatValue::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:FloatValue.value)
}

// -------------------------------------------------------------------

// HvacMode

// -------------------------------------------------------------------

// FanMode

// -------------------------------------------------------------------

// HvacStateRequest

// -------------------------------------------------------------------

// HvacStateResponse

// float sp = 1;
inline void HvacStateResponse::clear_sp() {
  sp_ = 0;
}
inline float HvacStateResponse::sp() const {
  // @@protoc_insertion_point(field_get:HvacStateResponse.sp)
  return sp_;
}
inline void HvacStateResponse::set_sp(float value) {
  
  sp_ = value;
  // @@protoc_insertion_point(field_set:HvacStateResponse.sp)
}

// float hsp = 2;
inline void HvacStateResponse::clear_hsp() {
  hsp_ = 0;
}
inline float HvacStateResponse::hsp() const {
  // @@protoc_insertion_point(field_get:HvacStateResponse.hsp)
  return hsp_;
}
inline void HvacStateResponse::set_hsp(float value) {
  
  hsp_ = value;
  // @@protoc_insertion_point(field_set:HvacStateResponse.hsp)
}

// float csp = 3;
inline void HvacStateResponse::clear_csp() {
  csp_ = 0;
}
inline float HvacStateResponse::csp() const {
  // @@protoc_insertion_point(field_get:HvacStateResponse.csp)
  return csp_;
}
inline void HvacStateResponse::set_csp(float value) {
  
  csp_ = value;
  // @@protoc_insertion_point(field_set:HvacStateResponse.csp)
}

// .HvacMode mode = 4;
inline bool HvacStateResponse::has_mode() const {
  return this != internal_default_instance() && mode_ != NULL;
}
inline void HvacStateResponse::clear_mode() {
  if (GetArenaNoVirtual() == NULL && mode_ != NULL) {
    delete mode_;
  }
  mode_ = NULL;
}
inline const ::HvacMode& HvacStateResponse::mode() const {
  const ::HvacMode* p = mode_;
  // @@protoc_insertion_point(field_get:HvacStateResponse.mode)
  return p != NULL ? *p : *reinterpret_cast<const ::HvacMode*>(
      &::_HvacMode_default_instance_);
}
inline ::HvacMode* HvacStateResponse::release_mode() {
  // @@protoc_insertion_point(field_release:HvacStateResponse.mode)
  
  ::HvacMode* temp = mode_;
  mode_ = NULL;
  return temp;
}
inline ::HvacMode* HvacStateResponse::mutable_mode() {
  
  if (mode_ == NULL) {
    mode_ = new ::HvacMode;
  }
  // @@protoc_insertion_point(field_mutable:HvacStateResponse.mode)
  return mode_;
}
inline void HvacStateResponse::set_allocated_mode(::HvacMode* mode) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mode_;
  }
  if (mode) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mode = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mode, submessage_arena);
    }
    
  } else {
    
  }
  mode_ = mode;
  // @@protoc_insertion_point(field_set_allocated:HvacStateResponse.mode)
}

// .FanMode fan = 5;
inline bool HvacStateResponse::has_fan() const {
  return this != internal_default_instance() && fan_ != NULL;
}
inline void HvacStateResponse::clear_fan() {
  if (GetArenaNoVirtual() == NULL && fan_ != NULL) {
    delete fan_;
  }
  fan_ = NULL;
}
inline const ::FanMode& HvacStateResponse::fan() const {
  const ::FanMode* p = fan_;
  // @@protoc_insertion_point(field_get:HvacStateResponse.fan)
  return p != NULL ? *p : *reinterpret_cast<const ::FanMode*>(
      &::_FanMode_default_instance_);
}
inline ::FanMode* HvacStateResponse::release_fan() {
  // @@protoc_insertion_point(field_release:HvacStateResponse.fan)
  
  ::FanMode* temp = fan_;
  fan_ = NULL;
  return temp;
}
inline ::FanMode* HvacStateResponse::mutable_fan() {
  
  if (fan_ == NULL) {
    fan_ = new ::FanMode;
  }
  // @@protoc_insertion_point(field_mutable:HvacStateResponse.fan)
  return fan_;
}
inline void HvacStateResponse::set_allocated_fan(::FanMode* fan) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fan_;
  }
  if (fan) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fan = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fan, submessage_arena);
    }
    
  } else {
    
  }
  fan_ = fan;
  // @@protoc_insertion_point(field_set_allocated:HvacStateResponse.fan)
}

// -------------------------------------------------------------------

// DisplayRequest

// string message = 1;
inline void DisplayRequest::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DisplayRequest::message() const {
  // @@protoc_insertion_point(field_get:DisplayRequest.message)
  return message_.GetNoArena();
}
inline void DisplayRequest::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DisplayRequest.message)
}
#if LANG_CXX11
inline void DisplayRequest::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DisplayRequest.message)
}
#endif
inline void DisplayRequest::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DisplayRequest.message)
}
inline void DisplayRequest::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DisplayRequest.message)
}
inline ::std::string* DisplayRequest::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:DisplayRequest.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DisplayRequest::release_message() {
  // @@protoc_insertion_point(field_release:DisplayRequest.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DisplayRequest::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:DisplayRequest.message)
}

// string url = 2;
inline void DisplayRequest::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DisplayRequest::url() const {
  // @@protoc_insertion_point(field_get:DisplayRequest.url)
  return url_.GetNoArena();
}
inline void DisplayRequest::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DisplayRequest.url)
}
#if LANG_CXX11
inline void DisplayRequest::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DisplayRequest.url)
}
#endif
inline void DisplayRequest::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DisplayRequest.url)
}
inline void DisplayRequest::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DisplayRequest.url)
}
inline ::std::string* DisplayRequest::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:DisplayRequest.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DisplayRequest::release_url() {
  // @@protoc_insertion_point(field_release:DisplayRequest.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DisplayRequest::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:DisplayRequest.url)
}

// -------------------------------------------------------------------

// DisplayResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::HvacMode_Enum> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HvacMode_Enum>() {
  return ::HvacMode_Enum_descriptor();
}
template <> struct is_proto_enum< ::FanMode_Enum> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FanMode_Enum>() {
  return ::FanMode_Enum_descriptor();
}
template <> struct is_proto_enum< ::VoiceAssistant> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::VoiceAssistant>() {
  return ::VoiceAssistant_descriptor();
}
template <> struct is_proto_enum< ::VoiceAssistantState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::VoiceAssistantState>() {
  return ::VoiceAssistantState_descriptor();
}
template <> struct is_proto_enum< ::VoiceAssistantStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::VoiceAssistantStatus>() {
  return ::VoiceAssistantStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_siana_2dstat_2eproto__INCLUDED
