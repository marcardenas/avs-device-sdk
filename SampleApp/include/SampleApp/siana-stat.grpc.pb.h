// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: siana-stat.proto
#ifndef GRPC_siana_2dstat_2eproto__INCLUDED
#define GRPC_siana_2dstat_2eproto__INCLUDED

#include "siana-stat.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

class SianaStat final {
 public:
  static constexpr char const* service_full_name() {
    return "SianaStat";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status VoiceAssistantSelect(::grpc::ClientContext* context, const ::VoiceAssistantRequest& request, ::VoiceAssistantResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VoiceAssistantResponse>> AsyncVoiceAssistantSelect(::grpc::ClientContext* context, const ::VoiceAssistantRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VoiceAssistantResponse>>(AsyncVoiceAssistantSelectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VoiceAssistantResponse>> PrepareAsyncVoiceAssistantSelect(::grpc::ClientContext* context, const ::VoiceAssistantRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VoiceAssistantResponse>>(PrepareAsyncVoiceAssistantSelectRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateVoiceState(::grpc::ClientContext* context, const ::VoiceStateRequest& request, ::VoiceStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VoiceStateResponse>> AsyncUpdateVoiceState(::grpc::ClientContext* context, const ::VoiceStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VoiceStateResponse>>(AsyncUpdateVoiceStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VoiceStateResponse>> PrepareAsyncUpdateVoiceState(::grpc::ClientContext* context, const ::VoiceStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VoiceStateResponse>>(PrepareAsyncUpdateVoiceStateRaw(context, request, cq));
    }
    virtual ::grpc::Status PushDisplayInfo(::grpc::ClientContext* context, const ::DisplayRequest& request, ::DisplayResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DisplayResponse>> AsyncPushDisplayInfo(::grpc::ClientContext* context, const ::DisplayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DisplayResponse>>(AsyncPushDisplayInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DisplayResponse>> PrepareAsyncPushDisplayInfo(::grpc::ClientContext* context, const ::DisplayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DisplayResponse>>(PrepareAsyncPushDisplayInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status GetState(::grpc::ClientContext* context, const ::HvacStateRequest& request, ::HvacStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HvacStateResponse>> AsyncGetState(::grpc::ClientContext* context, const ::HvacStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HvacStateResponse>>(AsyncGetStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HvacStateResponse>> PrepareAsyncGetState(::grpc::ClientContext* context, const ::HvacStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HvacStateResponse>>(PrepareAsyncGetStateRaw(context, request, cq));
    }
    virtual ::grpc::Status SetSetpoint(::grpc::ClientContext* context, const ::FloatValue& request, ::HvacStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HvacStateResponse>> AsyncSetSetpoint(::grpc::ClientContext* context, const ::FloatValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HvacStateResponse>>(AsyncSetSetpointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HvacStateResponse>> PrepareAsyncSetSetpoint(::grpc::ClientContext* context, const ::FloatValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HvacStateResponse>>(PrepareAsyncSetSetpointRaw(context, request, cq));
    }
    virtual ::grpc::Status SetHeatSetpoint(::grpc::ClientContext* context, const ::FloatValue& request, ::HvacStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HvacStateResponse>> AsyncSetHeatSetpoint(::grpc::ClientContext* context, const ::FloatValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HvacStateResponse>>(AsyncSetHeatSetpointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HvacStateResponse>> PrepareAsyncSetHeatSetpoint(::grpc::ClientContext* context, const ::FloatValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HvacStateResponse>>(PrepareAsyncSetHeatSetpointRaw(context, request, cq));
    }
    virtual ::grpc::Status SetCoolpoint(::grpc::ClientContext* context, const ::FloatValue& request, ::HvacStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HvacStateResponse>> AsyncSetCoolpoint(::grpc::ClientContext* context, const ::FloatValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HvacStateResponse>>(AsyncSetCoolpointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HvacStateResponse>> PrepareAsyncSetCoolpoint(::grpc::ClientContext* context, const ::FloatValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HvacStateResponse>>(PrepareAsyncSetCoolpointRaw(context, request, cq));
    }
    virtual ::grpc::Status SetHvacMode(::grpc::ClientContext* context, const ::HvacMode& request, ::HvacStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HvacStateResponse>> AsyncSetHvacMode(::grpc::ClientContext* context, const ::HvacMode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HvacStateResponse>>(AsyncSetHvacModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HvacStateResponse>> PrepareAsyncSetHvacMode(::grpc::ClientContext* context, const ::HvacMode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HvacStateResponse>>(PrepareAsyncSetHvacModeRaw(context, request, cq));
    }
    virtual ::grpc::Status SetFanMode(::grpc::ClientContext* context, const ::FanMode& request, ::HvacStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HvacStateResponse>> AsyncSetFanMode(::grpc::ClientContext* context, const ::FanMode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HvacStateResponse>>(AsyncSetFanModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HvacStateResponse>> PrepareAsyncSetFanMode(::grpc::ClientContext* context, const ::FanMode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HvacStateResponse>>(PrepareAsyncSetFanModeRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VoiceAssistantResponse>* AsyncVoiceAssistantSelectRaw(::grpc::ClientContext* context, const ::VoiceAssistantRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VoiceAssistantResponse>* PrepareAsyncVoiceAssistantSelectRaw(::grpc::ClientContext* context, const ::VoiceAssistantRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VoiceStateResponse>* AsyncUpdateVoiceStateRaw(::grpc::ClientContext* context, const ::VoiceStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VoiceStateResponse>* PrepareAsyncUpdateVoiceStateRaw(::grpc::ClientContext* context, const ::VoiceStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DisplayResponse>* AsyncPushDisplayInfoRaw(::grpc::ClientContext* context, const ::DisplayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DisplayResponse>* PrepareAsyncPushDisplayInfoRaw(::grpc::ClientContext* context, const ::DisplayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HvacStateResponse>* AsyncGetStateRaw(::grpc::ClientContext* context, const ::HvacStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HvacStateResponse>* PrepareAsyncGetStateRaw(::grpc::ClientContext* context, const ::HvacStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HvacStateResponse>* AsyncSetSetpointRaw(::grpc::ClientContext* context, const ::FloatValue& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HvacStateResponse>* PrepareAsyncSetSetpointRaw(::grpc::ClientContext* context, const ::FloatValue& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HvacStateResponse>* AsyncSetHeatSetpointRaw(::grpc::ClientContext* context, const ::FloatValue& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HvacStateResponse>* PrepareAsyncSetHeatSetpointRaw(::grpc::ClientContext* context, const ::FloatValue& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HvacStateResponse>* AsyncSetCoolpointRaw(::grpc::ClientContext* context, const ::FloatValue& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HvacStateResponse>* PrepareAsyncSetCoolpointRaw(::grpc::ClientContext* context, const ::FloatValue& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HvacStateResponse>* AsyncSetHvacModeRaw(::grpc::ClientContext* context, const ::HvacMode& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HvacStateResponse>* PrepareAsyncSetHvacModeRaw(::grpc::ClientContext* context, const ::HvacMode& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HvacStateResponse>* AsyncSetFanModeRaw(::grpc::ClientContext* context, const ::FanMode& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HvacStateResponse>* PrepareAsyncSetFanModeRaw(::grpc::ClientContext* context, const ::FanMode& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status VoiceAssistantSelect(::grpc::ClientContext* context, const ::VoiceAssistantRequest& request, ::VoiceAssistantResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VoiceAssistantResponse>> AsyncVoiceAssistantSelect(::grpc::ClientContext* context, const ::VoiceAssistantRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VoiceAssistantResponse>>(AsyncVoiceAssistantSelectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VoiceAssistantResponse>> PrepareAsyncVoiceAssistantSelect(::grpc::ClientContext* context, const ::VoiceAssistantRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VoiceAssistantResponse>>(PrepareAsyncVoiceAssistantSelectRaw(context, request, cq));
    }
    ::grpc::Status UpdateVoiceState(::grpc::ClientContext* context, const ::VoiceStateRequest& request, ::VoiceStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VoiceStateResponse>> AsyncUpdateVoiceState(::grpc::ClientContext* context, const ::VoiceStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VoiceStateResponse>>(AsyncUpdateVoiceStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VoiceStateResponse>> PrepareAsyncUpdateVoiceState(::grpc::ClientContext* context, const ::VoiceStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VoiceStateResponse>>(PrepareAsyncUpdateVoiceStateRaw(context, request, cq));
    }
    ::grpc::Status PushDisplayInfo(::grpc::ClientContext* context, const ::DisplayRequest& request, ::DisplayResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DisplayResponse>> AsyncPushDisplayInfo(::grpc::ClientContext* context, const ::DisplayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DisplayResponse>>(AsyncPushDisplayInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DisplayResponse>> PrepareAsyncPushDisplayInfo(::grpc::ClientContext* context, const ::DisplayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DisplayResponse>>(PrepareAsyncPushDisplayInfoRaw(context, request, cq));
    }
    ::grpc::Status GetState(::grpc::ClientContext* context, const ::HvacStateRequest& request, ::HvacStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HvacStateResponse>> AsyncGetState(::grpc::ClientContext* context, const ::HvacStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HvacStateResponse>>(AsyncGetStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HvacStateResponse>> PrepareAsyncGetState(::grpc::ClientContext* context, const ::HvacStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HvacStateResponse>>(PrepareAsyncGetStateRaw(context, request, cq));
    }
    ::grpc::Status SetSetpoint(::grpc::ClientContext* context, const ::FloatValue& request, ::HvacStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HvacStateResponse>> AsyncSetSetpoint(::grpc::ClientContext* context, const ::FloatValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HvacStateResponse>>(AsyncSetSetpointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HvacStateResponse>> PrepareAsyncSetSetpoint(::grpc::ClientContext* context, const ::FloatValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HvacStateResponse>>(PrepareAsyncSetSetpointRaw(context, request, cq));
    }
    ::grpc::Status SetHeatSetpoint(::grpc::ClientContext* context, const ::FloatValue& request, ::HvacStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HvacStateResponse>> AsyncSetHeatSetpoint(::grpc::ClientContext* context, const ::FloatValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HvacStateResponse>>(AsyncSetHeatSetpointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HvacStateResponse>> PrepareAsyncSetHeatSetpoint(::grpc::ClientContext* context, const ::FloatValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HvacStateResponse>>(PrepareAsyncSetHeatSetpointRaw(context, request, cq));
    }
    ::grpc::Status SetCoolpoint(::grpc::ClientContext* context, const ::FloatValue& request, ::HvacStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HvacStateResponse>> AsyncSetCoolpoint(::grpc::ClientContext* context, const ::FloatValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HvacStateResponse>>(AsyncSetCoolpointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HvacStateResponse>> PrepareAsyncSetCoolpoint(::grpc::ClientContext* context, const ::FloatValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HvacStateResponse>>(PrepareAsyncSetCoolpointRaw(context, request, cq));
    }
    ::grpc::Status SetHvacMode(::grpc::ClientContext* context, const ::HvacMode& request, ::HvacStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HvacStateResponse>> AsyncSetHvacMode(::grpc::ClientContext* context, const ::HvacMode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HvacStateResponse>>(AsyncSetHvacModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HvacStateResponse>> PrepareAsyncSetHvacMode(::grpc::ClientContext* context, const ::HvacMode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HvacStateResponse>>(PrepareAsyncSetHvacModeRaw(context, request, cq));
    }
    ::grpc::Status SetFanMode(::grpc::ClientContext* context, const ::FanMode& request, ::HvacStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HvacStateResponse>> AsyncSetFanMode(::grpc::ClientContext* context, const ::FanMode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HvacStateResponse>>(AsyncSetFanModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HvacStateResponse>> PrepareAsyncSetFanMode(::grpc::ClientContext* context, const ::FanMode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HvacStateResponse>>(PrepareAsyncSetFanModeRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::VoiceAssistantResponse>* AsyncVoiceAssistantSelectRaw(::grpc::ClientContext* context, const ::VoiceAssistantRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VoiceAssistantResponse>* PrepareAsyncVoiceAssistantSelectRaw(::grpc::ClientContext* context, const ::VoiceAssistantRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VoiceStateResponse>* AsyncUpdateVoiceStateRaw(::grpc::ClientContext* context, const ::VoiceStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VoiceStateResponse>* PrepareAsyncUpdateVoiceStateRaw(::grpc::ClientContext* context, const ::VoiceStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DisplayResponse>* AsyncPushDisplayInfoRaw(::grpc::ClientContext* context, const ::DisplayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DisplayResponse>* PrepareAsyncPushDisplayInfoRaw(::grpc::ClientContext* context, const ::DisplayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HvacStateResponse>* AsyncGetStateRaw(::grpc::ClientContext* context, const ::HvacStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HvacStateResponse>* PrepareAsyncGetStateRaw(::grpc::ClientContext* context, const ::HvacStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HvacStateResponse>* AsyncSetSetpointRaw(::grpc::ClientContext* context, const ::FloatValue& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HvacStateResponse>* PrepareAsyncSetSetpointRaw(::grpc::ClientContext* context, const ::FloatValue& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HvacStateResponse>* AsyncSetHeatSetpointRaw(::grpc::ClientContext* context, const ::FloatValue& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HvacStateResponse>* PrepareAsyncSetHeatSetpointRaw(::grpc::ClientContext* context, const ::FloatValue& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HvacStateResponse>* AsyncSetCoolpointRaw(::grpc::ClientContext* context, const ::FloatValue& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HvacStateResponse>* PrepareAsyncSetCoolpointRaw(::grpc::ClientContext* context, const ::FloatValue& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HvacStateResponse>* AsyncSetHvacModeRaw(::grpc::ClientContext* context, const ::HvacMode& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HvacStateResponse>* PrepareAsyncSetHvacModeRaw(::grpc::ClientContext* context, const ::HvacMode& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HvacStateResponse>* AsyncSetFanModeRaw(::grpc::ClientContext* context, const ::FanMode& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HvacStateResponse>* PrepareAsyncSetFanModeRaw(::grpc::ClientContext* context, const ::FanMode& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_VoiceAssistantSelect_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateVoiceState_;
    const ::grpc::internal::RpcMethod rpcmethod_PushDisplayInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_GetState_;
    const ::grpc::internal::RpcMethod rpcmethod_SetSetpoint_;
    const ::grpc::internal::RpcMethod rpcmethod_SetHeatSetpoint_;
    const ::grpc::internal::RpcMethod rpcmethod_SetCoolpoint_;
    const ::grpc::internal::RpcMethod rpcmethod_SetHvacMode_;
    const ::grpc::internal::RpcMethod rpcmethod_SetFanMode_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status VoiceAssistantSelect(::grpc::ServerContext* context, const ::VoiceAssistantRequest* request, ::VoiceAssistantResponse* response);
    virtual ::grpc::Status UpdateVoiceState(::grpc::ServerContext* context, const ::VoiceStateRequest* request, ::VoiceStateResponse* response);
    virtual ::grpc::Status PushDisplayInfo(::grpc::ServerContext* context, const ::DisplayRequest* request, ::DisplayResponse* response);
    virtual ::grpc::Status GetState(::grpc::ServerContext* context, const ::HvacStateRequest* request, ::HvacStateResponse* response);
    virtual ::grpc::Status SetSetpoint(::grpc::ServerContext* context, const ::FloatValue* request, ::HvacStateResponse* response);
    virtual ::grpc::Status SetHeatSetpoint(::grpc::ServerContext* context, const ::FloatValue* request, ::HvacStateResponse* response);
    virtual ::grpc::Status SetCoolpoint(::grpc::ServerContext* context, const ::FloatValue* request, ::HvacStateResponse* response);
    virtual ::grpc::Status SetHvacMode(::grpc::ServerContext* context, const ::HvacMode* request, ::HvacStateResponse* response);
    virtual ::grpc::Status SetFanMode(::grpc::ServerContext* context, const ::FanMode* request, ::HvacStateResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_VoiceAssistantSelect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_VoiceAssistantSelect() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_VoiceAssistantSelect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VoiceAssistantSelect(::grpc::ServerContext* context, const ::VoiceAssistantRequest* request, ::VoiceAssistantResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVoiceAssistantSelect(::grpc::ServerContext* context, ::VoiceAssistantRequest* request, ::grpc::ServerAsyncResponseWriter< ::VoiceAssistantResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateVoiceState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateVoiceState() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UpdateVoiceState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateVoiceState(::grpc::ServerContext* context, const ::VoiceStateRequest* request, ::VoiceStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateVoiceState(::grpc::ServerContext* context, ::VoiceStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::VoiceStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PushDisplayInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PushDisplayInfo() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_PushDisplayInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushDisplayInfo(::grpc::ServerContext* context, const ::DisplayRequest* request, ::DisplayResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushDisplayInfo(::grpc::ServerContext* context, ::DisplayRequest* request, ::grpc::ServerAsyncResponseWriter< ::DisplayResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetState() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetState(::grpc::ServerContext* context, const ::HvacStateRequest* request, ::HvacStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetState(::grpc::ServerContext* context, ::HvacStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::HvacStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetSetpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetSetpoint() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SetSetpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSetpoint(::grpc::ServerContext* context, const ::FloatValue* request, ::HvacStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetSetpoint(::grpc::ServerContext* context, ::FloatValue* request, ::grpc::ServerAsyncResponseWriter< ::HvacStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetHeatSetpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetHeatSetpoint() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SetHeatSetpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetHeatSetpoint(::grpc::ServerContext* context, const ::FloatValue* request, ::HvacStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetHeatSetpoint(::grpc::ServerContext* context, ::FloatValue* request, ::grpc::ServerAsyncResponseWriter< ::HvacStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetCoolpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetCoolpoint() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_SetCoolpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCoolpoint(::grpc::ServerContext* context, const ::FloatValue* request, ::HvacStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetCoolpoint(::grpc::ServerContext* context, ::FloatValue* request, ::grpc::ServerAsyncResponseWriter< ::HvacStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetHvacMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetHvacMode() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_SetHvacMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetHvacMode(::grpc::ServerContext* context, const ::HvacMode* request, ::HvacStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetHvacMode(::grpc::ServerContext* context, ::HvacMode* request, ::grpc::ServerAsyncResponseWriter< ::HvacStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetFanMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetFanMode() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_SetFanMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFanMode(::grpc::ServerContext* context, const ::FanMode* request, ::HvacStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetFanMode(::grpc::ServerContext* context, ::FanMode* request, ::grpc::ServerAsyncResponseWriter< ::HvacStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_VoiceAssistantSelect<WithAsyncMethod_UpdateVoiceState<WithAsyncMethod_PushDisplayInfo<WithAsyncMethod_GetState<WithAsyncMethod_SetSetpoint<WithAsyncMethod_SetHeatSetpoint<WithAsyncMethod_SetCoolpoint<WithAsyncMethod_SetHvacMode<WithAsyncMethod_SetFanMode<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_VoiceAssistantSelect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_VoiceAssistantSelect() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_VoiceAssistantSelect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VoiceAssistantSelect(::grpc::ServerContext* context, const ::VoiceAssistantRequest* request, ::VoiceAssistantResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateVoiceState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateVoiceState() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UpdateVoiceState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateVoiceState(::grpc::ServerContext* context, const ::VoiceStateRequest* request, ::VoiceStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PushDisplayInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PushDisplayInfo() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_PushDisplayInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushDisplayInfo(::grpc::ServerContext* context, const ::DisplayRequest* request, ::DisplayResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetState() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetState(::grpc::ServerContext* context, const ::HvacStateRequest* request, ::HvacStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetSetpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetSetpoint() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SetSetpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSetpoint(::grpc::ServerContext* context, const ::FloatValue* request, ::HvacStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetHeatSetpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetHeatSetpoint() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SetHeatSetpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetHeatSetpoint(::grpc::ServerContext* context, const ::FloatValue* request, ::HvacStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetCoolpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetCoolpoint() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_SetCoolpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCoolpoint(::grpc::ServerContext* context, const ::FloatValue* request, ::HvacStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetHvacMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetHvacMode() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_SetHvacMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetHvacMode(::grpc::ServerContext* context, const ::HvacMode* request, ::HvacStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetFanMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetFanMode() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_SetFanMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFanMode(::grpc::ServerContext* context, const ::FanMode* request, ::HvacStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VoiceAssistantSelect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_VoiceAssistantSelect() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::VoiceAssistantRequest, ::VoiceAssistantResponse>(std::bind(&WithStreamedUnaryMethod_VoiceAssistantSelect<BaseClass>::StreamedVoiceAssistantSelect, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_VoiceAssistantSelect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VoiceAssistantSelect(::grpc::ServerContext* context, const ::VoiceAssistantRequest* request, ::VoiceAssistantResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVoiceAssistantSelect(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VoiceAssistantRequest,::VoiceAssistantResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateVoiceState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateVoiceState() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::VoiceStateRequest, ::VoiceStateResponse>(std::bind(&WithStreamedUnaryMethod_UpdateVoiceState<BaseClass>::StreamedUpdateVoiceState, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateVoiceState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateVoiceState(::grpc::ServerContext* context, const ::VoiceStateRequest* request, ::VoiceStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateVoiceState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::VoiceStateRequest,::VoiceStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PushDisplayInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PushDisplayInfo() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::DisplayRequest, ::DisplayResponse>(std::bind(&WithStreamedUnaryMethod_PushDisplayInfo<BaseClass>::StreamedPushDisplayInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PushDisplayInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PushDisplayInfo(::grpc::ServerContext* context, const ::DisplayRequest* request, ::DisplayResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPushDisplayInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DisplayRequest,::DisplayResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetState() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::HvacStateRequest, ::HvacStateResponse>(std::bind(&WithStreamedUnaryMethod_GetState<BaseClass>::StreamedGetState, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetState(::grpc::ServerContext* context, const ::HvacStateRequest* request, ::HvacStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::HvacStateRequest,::HvacStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetSetpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetSetpoint() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::FloatValue, ::HvacStateResponse>(std::bind(&WithStreamedUnaryMethod_SetSetpoint<BaseClass>::StreamedSetSetpoint, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetSetpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetSetpoint(::grpc::ServerContext* context, const ::FloatValue* request, ::HvacStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetSetpoint(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::FloatValue,::HvacStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetHeatSetpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetHeatSetpoint() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::FloatValue, ::HvacStateResponse>(std::bind(&WithStreamedUnaryMethod_SetHeatSetpoint<BaseClass>::StreamedSetHeatSetpoint, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetHeatSetpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetHeatSetpoint(::grpc::ServerContext* context, const ::FloatValue* request, ::HvacStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetHeatSetpoint(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::FloatValue,::HvacStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetCoolpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetCoolpoint() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::FloatValue, ::HvacStateResponse>(std::bind(&WithStreamedUnaryMethod_SetCoolpoint<BaseClass>::StreamedSetCoolpoint, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetCoolpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetCoolpoint(::grpc::ServerContext* context, const ::FloatValue* request, ::HvacStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetCoolpoint(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::FloatValue,::HvacStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetHvacMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetHvacMode() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::HvacMode, ::HvacStateResponse>(std::bind(&WithStreamedUnaryMethod_SetHvacMode<BaseClass>::StreamedSetHvacMode, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetHvacMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetHvacMode(::grpc::ServerContext* context, const ::HvacMode* request, ::HvacStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetHvacMode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::HvacMode,::HvacStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetFanMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetFanMode() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::FanMode, ::HvacStateResponse>(std::bind(&WithStreamedUnaryMethod_SetFanMode<BaseClass>::StreamedSetFanMode, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetFanMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetFanMode(::grpc::ServerContext* context, const ::FanMode* request, ::HvacStateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetFanMode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::FanMode,::HvacStateResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_VoiceAssistantSelect<WithStreamedUnaryMethod_UpdateVoiceState<WithStreamedUnaryMethod_PushDisplayInfo<WithStreamedUnaryMethod_GetState<WithStreamedUnaryMethod_SetSetpoint<WithStreamedUnaryMethod_SetHeatSetpoint<WithStreamedUnaryMethod_SetCoolpoint<WithStreamedUnaryMethod_SetHvacMode<WithStreamedUnaryMethod_SetFanMode<Service > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_VoiceAssistantSelect<WithStreamedUnaryMethod_UpdateVoiceState<WithStreamedUnaryMethod_PushDisplayInfo<WithStreamedUnaryMethod_GetState<WithStreamedUnaryMethod_SetSetpoint<WithStreamedUnaryMethod_SetHeatSetpoint<WithStreamedUnaryMethod_SetCoolpoint<WithStreamedUnaryMethod_SetHvacMode<WithStreamedUnaryMethod_SetFanMode<Service > > > > > > > > > StreamedService;
};


#endif  // GRPC_siana_2dstat_2eproto__INCLUDED
